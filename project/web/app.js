// Generated by Haxe 4.1.4
(function ($global) { "use strict";
function $extend(from, fields) {
	var proto = Object.create(from);
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var HxOverrides = function() { };
HxOverrides.__name__ = true;
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
HxOverrides.now = function() {
	return Date.now();
};
Math.__name__ = true;
var Std = function() { };
Std.__name__ = true;
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
var StringTools = function() { };
StringTools.__name__ = true;
StringTools.isSpace = function(s,pos) {
	var c = HxOverrides.cca(s,pos);
	if(!(c > 8 && c < 14)) {
		return c == 32;
	} else {
		return true;
	}
};
StringTools.ltrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,r)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,r,l - r);
	} else {
		return s;
	}
};
StringTools.rtrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,l - r - 1)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,0,l - r);
	} else {
		return s;
	}
};
StringTools.trim = function(s) {
	return StringTools.ltrim(StringTools.rtrim(s));
};
var clay_ArrayPool = function(arrayLengths) {
	this.nextFree = 0;
	this.arrays = null;
	this.arrayLengths = arrayLengths;
};
clay_ArrayPool.__name__ = true;
clay_ArrayPool.pool = function(size) {
	if(size <= 10) {
		return clay_ArrayPool.dynPool10;
	} else if(size <= 100) {
		return clay_ArrayPool.dynPool100;
	} else if(size <= 1000) {
		return clay_ArrayPool.dynPool1000;
	} else if(size <= 10000) {
		return clay_ArrayPool.dynPool10000;
	} else if(size <= 100000) {
		return clay_ArrayPool.dynPool100000;
	} else {
		if(!clay_ArrayPool.didNotifyLargePool) {
			clay_ArrayPool.didNotifyLargePool = true;
			clay_Log.warning("You should avoid asking a pool for arrays with more than 100000 elements (asked: " + size + ") because it needs allocating a temporary one-time pool each time for that.",{ fileName : "src/clay/ArrayPool.hx", lineNumber : 47, className : "clay.ArrayPool", methodName : "pool"});
		}
		return new clay_ArrayPool(size);
	}
};
clay_ArrayPool.prototype = {
	get: function() {
		if(this.arrays == null) {
			this.arrays = new clay_ReusableArray(clay_ArrayPool.ALLOC_STEP);
		} else if(this.nextFree >= this.arrays.length) {
			var _g = this.arrays;
			_g.set_length(_g.length + clay_ArrayPool.ALLOC_STEP);
		}
		var result = this.arrays.vector[this.nextFree];
		if(result == null) {
			result = new clay_ReusableArray(this.arrayLengths);
			this.arrays.vector[this.nextFree] = result;
		}
		result._poolIndex = this.nextFree;
		while(true) {
			this.nextFree++;
			if(this.nextFree == this.arrays.length) {
				break;
			}
			var item = this.arrays.vector[this.nextFree];
			if(item == null) {
				break;
			}
			if(item._poolIndex == -1) {
				break;
			}
		}
		return result;
	}
	,release: function(array) {
		var poolIndex = array._poolIndex;
		array._poolIndex = -1;
		if(this.nextFree > poolIndex) {
			this.nextFree = poolIndex;
		}
		var _g = 0;
		var _g1 = array.length;
		while(_g < _g1) {
			var i = _g++;
			array.vector[i] = null;
		}
	}
};
var clay_Clay = function(configure,events) {
	this.windowInBackground = false;
	this.ready = false;
	this.freeze = false;
	this.immediateShutdown = false;
	this.timestamp = -1;
	this.hasShutdown = false;
	this.shuttingDown = false;
	clay_Clay.app = this;
	this.config = this.defaultConfig();
	configure(this.config);
	this.events = events;
	this.io = new clay_web_WebIO(this);
	clay_Immediate.flush();
	this.assets = new clay_web_WebAssets(this);
	clay_Immediate.flush();
	this.input = new clay_Input(this);
	clay_Immediate.flush();
	this.runtime = new clay_web_WebRuntime(this);
	clay_Immediate.flush();
	this.init();
};
clay_Clay.__name__ = true;
clay_Clay.prototype = {
	set_freeze: function(freeze) {
		this.freeze = freeze;
		if(freeze) {
			this.events.freeze();
		} else {
			this.events.unfreeze();
		}
		return freeze;
	}
	,init: function() {
		clay_Log.debug("Clay / init",{ fileName : "src/clay/Clay.hx", lineNumber : 126, className : "clay.Clay", methodName : "init"});
		this.io.init();
		clay_Immediate.flush();
		this.input.init();
		clay_Immediate.flush();
		this.runtime.init();
		clay_Immediate.flush();
		clay_Log.debug("Clay / ready",{ fileName : "src/clay/Clay.hx", lineNumber : 137, className : "clay.Clay", methodName : "init"});
		this.runtime.ready();
		clay_Immediate.flush();
		this.timestamp = window.performance.now() / 1000.0 - clay_web_WebRuntime.timestampStart;
		this.ready = true;
		this.updateScreen();
		this.events.ready();
		var shouldExit = this.runtime.run();
		if(shouldExit && !(this.hasShutdown || this.shuttingDown)) {
			this.shutdown();
		}
	}
	,shutdown: function() {
		if(this.shuttingDown) {
			clay_Log.debug("Clay / shutdown() called again, already shutting down - ignoring",{ fileName : "src/clay/Clay.hx", lineNumber : 158, className : "clay.Clay", methodName : "shutdown"});
			return;
		}
		if(this.hasShutdown) {
			throw haxe_Exception.thrown("Clay / calling shutdown() more than once is disallowed");
		}
		this.shuttingDown = true;
		this.io.shutdown();
		this.input.shutdown();
		this.runtime.shutdown(this.immediateShutdown);
		clay_Log.debug("Clay / shutdown",{ fileName : "src/clay/Clay.hx", lineNumber : 173, className : "clay.Clay", methodName : "shutdown"});
		this.hasShutdown = true;
	}
	,emitQuit: function() {
		this.shutdown();
	}
	,emitTick: function() {
		if(this.freeze) {
			return;
		}
		clay_Immediate.flush();
		this.updateScreen();
		if(!this.shuttingDown && this.ready) {
			var newTimestamp = window.performance.now() / 1000.0 - clay_web_WebRuntime.timestampStart;
			var delta = newTimestamp - this.timestamp;
			this.timestamp = newTimestamp;
			this.events.tick(delta);
		}
	}
	,emitWindowEvent: function(type,timestamp,windowId,x,y) {
		this.events.windowEvent(type,timestamp,windowId,x,y);
	}
	,emitAppEvent: function(type) {
		this.events.appEvent(type);
	}
	,defaultConfig: function() {
		var _g = clay_web_WebRuntime.defaultConfig();
		return new clay_Config(this.defaultWindowConfig(),this.defaultRenderConfig(),_g);
	}
	,defaultWindowConfig: function() {
		var $window = new clay_WindowConfig(false,false,true,false,536805376,536805376,960,640,"clay app",false,0.0666666666666666657);
		return $window;
	}
	,defaultRenderConfig: function() {
		return new clay_RenderConfig(0,0,0,8,8,8,8,new clay_graphics_Color(0,0,0,1),new clay_RenderConfigWebGL(1,null,null,null,null,null,null,null,null));
	}
	,defaultRuntimeConfig: function() {
		return new clay_web_WebConfig(null,null,null,null,null,null,null);
	}
	,copyWindowConfig: function(config) {
		return new clay_WindowConfig(config.fullscreen,config.trueFullscreen,config.resizable,config.borderless,config.x,config.y,config.width,config.height,"" + config.title,config.noInput,config.backgroundSleep);
	}
	,copyRenderConfig: function(config) {
		return new clay_RenderConfig(config.depth,config.stencil,config.antialiasing,config.redBits,config.greenBits,config.blueBits,config.alphaBits,new clay_graphics_Color(config.defaultClear.r,config.defaultClear.g,config.defaultClear.b,config.defaultClear.a),new clay_RenderConfigWebGL(config.webgl.version,null,null,null,null,null,null,null,null));
	}
	,updateScreen: function() {
		this.screenDensity = clay_Clay.app.runtime.windowDevicePixelRatio();
		var _this = clay_Clay.app.runtime;
		this.screenWidth = Math.round(Math.round(_this.windowW * _this.windowDevicePixelRatio()) / this.screenDensity);
		var _this = clay_Clay.app.runtime;
		this.screenHeight = Math.round(Math.round(_this.windowH * _this.windowDevicePixelRatio()) / this.screenDensity);
	}
};
var clay_RenderConfig = function(depth,stencil,antialiasing,redBits,greenBits,blueBits,alphaBits,defaultClear,webgl) {
	this.webgl = null;
	this.defaultClear = new clay_graphics_Color(0,0,0,1);
	this.alphaBits = 8;
	this.blueBits = 8;
	this.greenBits = 8;
	this.redBits = 8;
	this.antialiasing = 0;
	this.stencil = 0;
	this.depth = 0;
	if(depth != null) {
		this.depth = depth;
	}
	if(stencil != null) {
		this.stencil = stencil;
	}
	if(antialiasing != null) {
		this.antialiasing = antialiasing;
	}
	if(redBits != null) {
		this.redBits = redBits;
	}
	if(greenBits != null) {
		this.greenBits = greenBits;
	}
	if(blueBits != null) {
		this.blueBits = blueBits;
	}
	if(alphaBits != null) {
		this.alphaBits = alphaBits;
	}
	if(defaultClear != null) {
		this.defaultClear = defaultClear;
	}
	if(webgl != null) {
		this.webgl = webgl;
	}
};
clay_RenderConfig.__name__ = true;
var clay_RenderConfigWebGL = function(version,alpha,depth,stencil,antialias,premultipliedAlpha,preserveDrawingBuffer,preferLowPowerToHighPerformance,failIfMajorPerformanceCaveat) {
	this.failIfMajorPerformanceCaveat = false;
	this.preferLowPowerToHighPerformance = false;
	this.preserveDrawingBuffer = false;
	this.premultipliedAlpha = false;
	this.antialias = true;
	this.stencil = false;
	this.depth = true;
	this.alpha = false;
	this.version = 1;
	if(version != null) {
		this.version = version;
	}
	if(alpha != null) {
		this.alpha = alpha;
	}
	if(depth != null) {
		this.depth = depth;
	}
	if(stencil != null) {
		this.stencil = stencil;
	}
	if(antialias != null) {
		this.antialias = antialias;
	}
	if(premultipliedAlpha != null) {
		this.premultipliedAlpha = premultipliedAlpha;
	}
	if(preserveDrawingBuffer != null) {
		this.preserveDrawingBuffer = preserveDrawingBuffer;
	}
	if(preferLowPowerToHighPerformance != null) {
		this.preferLowPowerToHighPerformance = preferLowPowerToHighPerformance;
	}
	if(failIfMajorPerformanceCaveat != null) {
		this.failIfMajorPerformanceCaveat = failIfMajorPerformanceCaveat;
	}
};
clay_RenderConfigWebGL.__name__ = true;
var clay_WindowConfig = function(fullscreen,trueFullscreen,resizable,borderless,x,y,width,height,title,noInput,backgroundSleep) {
	this.backgroundSleep = 0.0666666666666666657;
	this.noInput = false;
	this.title = null;
	this.height = 640;
	this.width = 960;
	this.y = 0;
	this.x = 0;
	this.borderless = false;
	this.resizable = true;
	this.trueFullscreen = false;
	this.fullscreen = false;
	if(fullscreen != null) {
		this.fullscreen = fullscreen;
	}
	if(trueFullscreen != null) {
		this.trueFullscreen = trueFullscreen;
	}
	if(resizable != null) {
		this.resizable = resizable;
	}
	if(borderless != null) {
		this.borderless = borderless;
	}
	if(x != null) {
		this.x = x;
	}
	if(y != null) {
		this.y = y;
	}
	if(width != null) {
		this.width = width;
	}
	if(height != null) {
		this.height = height;
	}
	if(title != null) {
		this.title = title;
	}
	if(noInput != null) {
		this.noInput = noInput;
	}
	if(backgroundSleep != null) {
		this.backgroundSleep = backgroundSleep;
	}
};
clay_WindowConfig.__name__ = true;
var clay_Config = function($window,render,runtime) {
	this.runtime = null;
	this.render = null;
	this.window = null;
	if($window != null) {
		this.window = $window;
	}
	if(render != null) {
		this.render = render;
	}
	if(runtime != null) {
		this.runtime = runtime;
	}
};
clay_Config.__name__ = true;
var clay_Events = function() { };
clay_Events.__name__ = true;
clay_Events.prototype = {
	ready: function() {
	}
	,tick: function(delta) {
	}
	,freeze: function() {
	}
	,unfreeze: function() {
	}
	,mouseEnter: function(event) {
	}
	,mouseLeave: function(event) {
	}
	,keyDown: function(keycode,scancode,repeat,mod,timestamp,windowId) {
	}
	,keyUp: function(keycode,scancode,repeat,mod,timestamp,windowId) {
	}
	,text: function(text,start,length,type,timestamp,windowId) {
	}
	,mouseMove: function(x,y,xrel,yrel,timestamp,windowId) {
	}
	,mouseDown: function(x,y,button,timestamp,windowId) {
	}
	,mouseUp: function(x,y,button,timestamp,windowId) {
	}
	,mouseWheel: function(x,y,timestamp,windowId) {
	}
	,touchDown: function(x,y,dx,dy,touchId,timestamp) {
	}
	,touchUp: function(x,y,dx,dy,touchId,timestamp) {
	}
	,touchMove: function(x,y,dx,dy,touchId,timestamp) {
	}
	,gamepadAxis: function(gamepad,axis,value,timestamp) {
	}
	,gamepadDown: function(gamepad,button,value,timestamp) {
	}
	,gamepadUp: function(gamepad,button,value,timestamp) {
	}
	,gamepadDevice: function(gamepad,id,type,timestamp) {
	}
	,windowEvent: function(type,timestamp,windowId,x,y) {
	}
	,appEvent: function(type) {
	}
};
var clay_Extensions = function() { };
clay_Extensions.__name__ = true;
clay_Extensions.unsafeGet = function(array,index) {
	return array[index];
};
clay_Extensions.unsafeSet = function(array,index,value) {
	array[index] = value;
};
var clay_Image = function(width,height,widthActual,heightActual,bitsPerPixel,sourceBitsPerPixel,pixels) {
	this.pixels = null;
	this.sourceBitsPerPixel = 4;
	this.bitsPerPixel = 4;
	this.heightActual = 0;
	this.widthActual = 0;
	this.height = 0;
	this.width = 0;
	if(width != null) {
		this.width = width;
	}
	if(height != null) {
		this.height = height;
	}
	if(widthActual != null) {
		this.widthActual = widthActual;
	}
	if(heightActual != null) {
		this.heightActual = heightActual;
	}
	if(bitsPerPixel != null) {
		this.bitsPerPixel = bitsPerPixel;
	}
	if(sourceBitsPerPixel != null) {
		this.sourceBitsPerPixel = sourceBitsPerPixel;
	}
	if(pixels != null) {
		this.pixels = pixels;
	}
};
clay_Image.__name__ = true;
var clay_Immediate = function() { };
clay_Immediate.__name__ = true;
clay_Immediate.push = function(handleImmediate) {
	if(handleImmediate == null) {
		throw haxe_Exception.thrown("Immediate callback should not be null!");
	}
	if(clay_Immediate.immediateCallbacksLen < clay_Immediate.immediateCallbacksCapacity) {
		clay_Immediate.immediateCallbacks[clay_Immediate.immediateCallbacksLen] = handleImmediate;
		clay_Immediate.immediateCallbacksLen++;
	} else {
		clay_Immediate.immediateCallbacks[clay_Immediate.immediateCallbacksLen++] = handleImmediate;
		clay_Immediate.immediateCallbacksCapacity++;
	}
};
clay_Immediate.flush = function() {
	var didFlush = false;
	while(clay_Immediate.immediateCallbacksLen > 0) {
		didFlush = true;
		var pool = clay_ArrayPool.pool(clay_Immediate.immediateCallbacksLen);
		var callbacks = pool.get();
		var len = clay_Immediate.immediateCallbacksLen;
		clay_Immediate.immediateCallbacksLen = 0;
		var _g = 0;
		var _g1 = len;
		while(_g < _g1) {
			var i = _g++;
			callbacks.vector[i] = clay_Immediate.immediateCallbacks[i];
			clay_Immediate.immediateCallbacks[i] = null;
		}
		var _g2 = 0;
		var _g3 = len;
		while(_g2 < _g3) {
			var i1 = _g2++;
			var cb = callbacks.vector[i1];
			cb();
		}
		pool.release(callbacks);
	}
	return didFlush;
};
var clay_Input = function(app) {
	this.app = app;
	this.modState = new clay_ModState();
	this.modState.none = true;
};
clay_Input.__name__ = true;
clay_Input.prototype = {
	init: function() {
	}
	,shutdown: function() {
	}
	,emitKeyDown: function(keyCode,scanCode,repeat,mod,timestamp,windowId) {
		this.app.events.keyDown(keyCode,scanCode,repeat,mod,timestamp,windowId);
	}
	,emitKeyUp: function(keyCode,scanCode,repeat,mod,timestamp,windowId) {
		this.app.events.keyUp(keyCode,scanCode,repeat,mod,timestamp,windowId);
	}
	,emitText: function(text,start,length,type,timestamp,windowId) {
		this.app.events.text(text,start,length,type,timestamp,windowId);
	}
	,emitMouseMove: function(x,y,xrel,yrel,timestamp,windowId) {
		this.app.events.mouseMove(x,y,xrel,yrel,timestamp,windowId);
	}
	,emitMouseDown: function(x,y,button,timestamp,windowId) {
		this.app.events.mouseDown(x,y,button,timestamp,windowId);
	}
	,emitMouseUp: function(x,y,button,timestamp,windowId) {
		this.app.events.mouseUp(x,y,button,timestamp,windowId);
	}
	,emitMouseWheel: function(x,y,timestamp,windowId) {
		this.app.events.mouseWheel(x,y,timestamp,windowId);
	}
	,emitTouchDown: function(x,y,dx,dy,touchId,timestamp) {
		this.app.events.touchDown(x,y,dx,dy,touchId,timestamp);
	}
	,emitTouchUp: function(x,y,dx,dy,touchId,timestamp) {
		this.app.events.touchUp(x,y,dx,dy,touchId,timestamp);
	}
	,emitTouchMove: function(x,y,dx,dy,touchId,timestamp) {
		this.app.events.touchMove(x,y,dx,dy,touchId,timestamp);
	}
	,emitGamepadAxis: function(gamepad,axis,value,timestamp) {
		this.app.events.gamepadAxis(gamepad,axis,value,timestamp);
	}
	,emitGamepadDown: function(gamepad,button,value,timestamp) {
		this.app.events.gamepadDown(gamepad,button,value,timestamp);
	}
	,emitGamepadUp: function(gamepad,button,value,timestamp) {
		this.app.events.gamepadUp(gamepad,button,value,timestamp);
	}
	,emitGamepadDevice: function(gamepad,id,type,timestamp) {
		this.app.events.gamepadDevice(gamepad,id,type,timestamp);
	}
};
var clay_KeyCode = {};
clay_KeyCode.$name = function(keyCode) {
	if((keyCode & clay_ScanCode.MASK) != 0) {
		return clay_ScanCode.$name(keyCode & ~clay_ScanCode.MASK);
	}
	switch(keyCode) {
	case 8:
		return clay_ScanCode.$name(42);
	case 9:
		return clay_ScanCode.$name(43);
	case 13:
		return clay_ScanCode.$name(40);
	case 27:
		return clay_ScanCode.$name(41);
	case 32:
		return clay_ScanCode.$name(44);
	case 97:
		return clay_ScanCode.$name(4);
	case 98:
		return clay_ScanCode.$name(5);
	case 99:
		return clay_ScanCode.$name(6);
	case 100:
		return clay_ScanCode.$name(7);
	case 101:
		return clay_ScanCode.$name(8);
	case 102:
		return clay_ScanCode.$name(9);
	case 103:
		return clay_ScanCode.$name(10);
	case 104:
		return clay_ScanCode.$name(11);
	case 105:
		return clay_ScanCode.$name(12);
	case 106:
		return clay_ScanCode.$name(13);
	case 107:
		return clay_ScanCode.$name(14);
	case 108:
		return clay_ScanCode.$name(15);
	case 109:
		return clay_ScanCode.$name(16);
	case 110:
		return clay_ScanCode.$name(17);
	case 111:
		return clay_ScanCode.$name(18);
	case 112:
		return clay_ScanCode.$name(19);
	case 113:
		return clay_ScanCode.$name(20);
	case 114:
		return clay_ScanCode.$name(21);
	case 115:
		return clay_ScanCode.$name(22);
	case 116:
		return clay_ScanCode.$name(23);
	case 117:
		return clay_ScanCode.$name(24);
	case 118:
		return clay_ScanCode.$name(25);
	case 119:
		return clay_ScanCode.$name(26);
	case 120:
		return clay_ScanCode.$name(27);
	case 121:
		return clay_ScanCode.$name(28);
	case 122:
		return clay_ScanCode.$name(29);
	case 127:
		return clay_ScanCode.$name(76);
	default:
		return String.fromCodePoint(keyCode);
	}
};
clay_KeyCode.toScanCode = function(keycode) {
	if((keycode & clay_ScanCode.MASK) != 0) {
		return keycode & ~clay_ScanCode.MASK;
	}
	switch(keycode) {
	case 8:
		return 42;
	case 9:
		return 43;
	case 13:
		return 40;
	case 27:
		return 41;
	case 32:
		return 44;
	case 47:
		return 56;
	case 48:
		return 39;
	case 49:
		return 30;
	case 50:
		return 31;
	case 51:
		return 32;
	case 52:
		return 33;
	case 53:
		return 34;
	case 54:
		return 35;
	case 55:
		return 36;
	case 56:
		return 37;
	case 57:
		return 38;
	case 59:
		return 51;
	case 61:
		return 46;
	case 91:
		return 47;
	case 92:
		return 49;
	case 93:
		return 48;
	case 96:
		return 53;
	case 97:
		return 4;
	case 98:
		return 5;
	case 99:
		return 6;
	case 100:
		return 7;
	case 101:
		return 8;
	case 102:
		return 9;
	case 103:
		return 10;
	case 104:
		return 11;
	case 105:
		return 12;
	case 106:
		return 13;
	case 107:
		return 14;
	case 108:
		return 15;
	case 109:
		return 16;
	case 110:
		return 17;
	case 111:
		return 18;
	case 112:
		return 19;
	case 113:
		return 20;
	case 114:
		return 21;
	case 115:
		return 22;
	case 116:
		return 23;
	case 117:
		return 24;
	case 118:
		return 25;
	case 119:
		return 26;
	case 120:
		return 27;
	case 121:
		return 28;
	case 122:
		return 29;
	}
	return 0;
};
clay_KeyCode.toString = function(this1) {
	return "KeyCode(" + this1 + " " + clay_KeyCode.$name(this1) + ")";
};
var clay_Log = function() { };
clay_Log.__name__ = true;
clay_Log.debug = function(message,pos) {
};
clay_Log.info = function(message,pos) {
	haxe_Log.trace("[info] " + message,pos);
};
clay_Log.warning = function(message,pos) {
	haxe_Log.trace("[warning] " + message,pos);
};
clay_Log.error = function(message,pos) {
	haxe_Log.trace("[error] " + message,pos);
};
clay_Log.success = function(message,pos) {
	haxe_Log.trace("[success] " + message,pos);
};
var clay_Resource = function() {
	this.id = null;
};
clay_Resource.__name__ = true;
var clay_ReusableArray = function(length) {
	this._poolIndex = -1;
	this.set_length(length);
};
clay_ReusableArray.__name__ = true;
clay_ReusableArray.prototype = {
	set_length: function(length) {
		if(this.vector == null) {
			var this1 = new Array(length);
			this.vector = this1;
			this.length = length;
			return length;
		}
		if(length == this.length) {
			return length;
		}
		if(length > this.vector.length) {
			var this1 = new Array(length);
			var newVector = this1;
			var _g = 0;
			var _g1 = this.length;
			while(_g < _g1) {
				var i = _g++;
				newVector[i] = this.vector[i];
				this.vector[i] = null;
			}
			this.vector = newVector;
			var _g = this.length;
			var _g1 = length;
			while(_g < _g1) {
				var i = _g++;
				this.vector[i] = null;
			}
		} else {
			var _g = length;
			var _g1 = this.length;
			while(_g < _g1) {
				var i = _g++;
				this.vector[i] = null;
			}
		}
		this.length = length;
		return length;
	}
	,get: function(index) {
		return this.vector[index];
	}
	,set: function(index,value) {
		this.vector[index] = value;
	}
};
var clay_ScanCode = {};
clay_ScanCode.$name = function(scanCode) {
	var res = null;
	if(scanCode >= 0 && scanCode < clay_ScanCode.scanCodeNames.length) {
		res = clay_ScanCode.scanCodeNames[scanCode];
	}
	if(res != null) {
		return res;
	} else {
		return "";
	}
};
clay_ScanCode.toString = function(this1) {
	return "ScanCode(" + this1 + " " + clay_ScanCode.$name(this1) + ")";
};
var clay_GamepadDeviceEventType = {};
clay_GamepadDeviceEventType.toString = function(this1) {
	switch(this1) {
	case 0:
		return "UNKNOWN";
	case 1:
		return "DEVICE_ADDED";
	case 2:
		return "DEVICE_REMOVED";
	case 3:
		return "DEVICE_REMAPPED";
	default:
		return "" + this1;
	}
};
var clay_ModState = function() {
	this.meta = false;
	this.alt = false;
	this.shift = false;
	this.ctrl = false;
	this.mode = false;
	this.caps = false;
	this.num = false;
	this.rmeta = false;
	this.lmeta = false;
	this.ralt = false;
	this.lalt = false;
	this.rctrl = false;
	this.lctrl = false;
	this.rshift = false;
	this.lshift = false;
	this.none = false;
};
clay_ModState.__name__ = true;
clay_ModState.prototype = {
	toString: function() {
		var s = "{ \"ModState\":true ";
		if(this.none) {
			return s + ", \"none\":true }";
		}
		if(this.lshift) {
			s += ", \"lshift\":true";
		}
		if(this.rshift) {
			s += ", \"rshift\":true";
		}
		if(this.lctrl) {
			s += ", \"lctrl\":true";
		}
		if(this.rctrl) {
			s += ", \"rctrl\":true";
		}
		if(this.lalt) {
			s += ", \"lalt\":true";
		}
		if(this.ralt) {
			s += ", \"ralt\":true";
		}
		if(this.lmeta) {
			s += ", \"lmeta\":true";
		}
		if(this.rmeta) {
			s += ", \"rmeta\":true";
		}
		if(this.num) {
			s += ", \"num\":true";
		}
		if(this.caps) {
			s += ", \"caps\":true";
		}
		if(this.mode) {
			s += ", \"mode\":true";
		}
		if(this.ctrl) {
			s += ", \"ctrl\":true";
		}
		if(this.shift) {
			s += ", \"shift\":true";
		}
		if(this.alt) {
			s += ", \"alt\":true";
		}
		if(this.meta) {
			s += ", \"meta\":true";
		}
		s += "}";
		return s;
	}
};
var clay_TextEventType = {};
clay_TextEventType.toString = function(this1) {
	switch(this1) {
	case 0:
		return "UNKNOWN";
	case 1:
		return "EDIT";
	case 2:
		return "INPUT";
	default:
		return "" + this1;
	}
};
var clay_WindowEventType = {};
clay_WindowEventType.toString = function(this1) {
	switch(this1) {
	case 0:
		return "UNKNOWN";
	case 1:
		return "SHOWN";
	case 2:
		return "HIDDEN";
	case 3:
		return "EXPOSED";
	case 4:
		return "MOVED";
	case 5:
		return "RESIZED";
	case 6:
		return "SIZE_CHANGED";
	case 7:
		return "MINIMIZED";
	case 8:
		return "MAXIMIZED";
	case 9:
		return "RESTORED";
	case 10:
		return "ENTER";
	case 11:
		return "LEAVE";
	case 12:
		return "FOCUS_GAINED";
	case 13:
		return "FOCUS_LOST";
	case 14:
		return "CLOSE";
	default:
		return "" + this1;
	}
};
var clay_AppEventType = {};
clay_AppEventType.toString = function(this1) {
	switch(this1) {
	case 0:
		return "UNKNOWN";
	case 11:
		return "TERMINATING";
	case 12:
		return "LOW_MEMORY";
	case 13:
		return "WILL_ENTER_BACKGROUND";
	case 14:
		return "DID_ENTER_BACKGROUND";
	case 15:
		return "WILL_ENTER_FOREGROUND";
	case 16:
		return "DID_ENTER_FOREGROUND";
	default:
		return "" + this1;
	}
};
var clay_base_BaseAssets = function(app) {
	this.app = app;
};
clay_base_BaseAssets.__name__ = true;
clay_base_BaseAssets.prototype = {
	isSynchronous: function() {
		return false;
	}
	,loadImage: function(path,components,callback) {
		if(components == null) {
			components = 4;
		}
		if(callback != null) {
			clay_Immediate.push(function() {
				callback(null);
			});
		}
		return null;
	}
};
var clay_base_BaseIO = function(app) {
	this.app = app;
};
clay_base_BaseIO.__name__ = true;
clay_base_BaseIO.prototype = {
	init: function() {
	}
	,shutdown: function() {
	}
	,isSynchronous: function() {
		return false;
	}
	,appPath: function() {
		return null;
	}
	,loadData: function(path,options,callback) {
		if(callback != null) {
			clay_Immediate.push(function() {
				callback(null);
			});
		}
		return null;
	}
};
var clay_base_BaseRuntime = function(app) {
	this.name = null;
	this.app = app;
};
clay_base_BaseRuntime.__name__ = true;
clay_base_BaseRuntime.prototype = {
	init: function() {
	}
	,shutdown: function(immediate) {
		if(immediate == null) {
			immediate = false;
		}
	}
	,ready: function() {
	}
	,run: function() {
		return true;
	}
	,windowDevicePixelRatio: function() {
		return 1.0;
	}
	,windowWidth: function() {
		return 0;
	}
	,windowHeight: function() {
		return 0;
	}
};
var clay_buffers_Float32Array = {};
clay_buffers_Float32Array._new = function(_elements) {
	var this1 = new Float32Array(_elements);
	return this1;
};
clay_buffers_Float32Array.fromArray = function(_array) {
	return new Float32Array(_array);
};
clay_buffers_Float32Array.fromView = function(_view) {
	return new Float32Array(_view);
};
clay_buffers_Float32Array.fromBuffer = function(_buffer,_byteOffset,_byteLength) {
	return new Float32Array(_buffer,_byteOffset,_byteLength / 4 | 0);
};
clay_buffers_Float32Array.fromBytes = function(bytes,byteOffset,len) {
	if(byteOffset == null) {
		byteOffset = 0;
	}
	if(byteOffset == null) {
		return new Float32Array(bytes.b.bufferValue);
	}
	if(len == null) {
		return new Float32Array(bytes.b.bufferValue,byteOffset);
	}
	return new Float32Array(bytes.b.bufferValue,byteOffset,len);
};
clay_buffers_Float32Array.toBytes = function(this1) {
	return new haxe_io_Bytes(new Uint8Array(this1.buffer));
};
clay_buffers_Float32Array.toString = function(this1) {
	return "Float32Array [byteLength:" + this1.byteLength + ", length:" + this1.length + "]";
};
var clay_buffers_Int32Array = {};
clay_buffers_Int32Array._new = function(_elements) {
	var this1 = new Int32Array(_elements);
	return this1;
};
clay_buffers_Int32Array.fromArray = function(_array) {
	return new Int32Array(_array);
};
clay_buffers_Int32Array.fromView = function(_view) {
	return new Int32Array(_view);
};
clay_buffers_Int32Array.fromBuffer = function(_buffer,_byteOffset,_byteLength) {
	return new Int32Array(_buffer,_byteOffset,_byteLength / 4 | 0);
};
clay_buffers_Int32Array.fromBytes = function(bytes,byteOffset,len) {
	if(byteOffset == null) {
		byteOffset = 0;
	}
	if(byteOffset == null) {
		return new Int32Array(bytes.b.bufferValue);
	}
	if(len == null) {
		return new Int32Array(bytes.b.bufferValue,byteOffset);
	}
	return new Int32Array(bytes.b.bufferValue,byteOffset,len);
};
clay_buffers_Int32Array.toBytes = function(this1) {
	return new haxe_io_Bytes(new Uint8Array(this1.buffer));
};
clay_buffers_Int32Array.toString = function(this1) {
	return "Int32Array [byteLength:" + this1.byteLength + ", length:" + this1.length + "]";
};
var clay_buffers_Uint8Array = {};
clay_buffers_Uint8Array._new = function(_elements) {
	var this1 = new Uint8Array(_elements);
	return this1;
};
clay_buffers_Uint8Array.fromArray = function(_array) {
	return new Uint8Array(_array);
};
clay_buffers_Uint8Array.fromView = function(_view) {
	return new Uint8Array(_view);
};
clay_buffers_Uint8Array.fromBuffer = function(_buffer,_byteOffset,_byteLength) {
	return new Uint8Array(_buffer,_byteOffset,_byteLength);
};
clay_buffers_Uint8Array.fromBytes = function(bytes,byteOffset,len) {
	if(byteOffset == null) {
		return new Uint8Array(bytes.b.bufferValue);
	}
	if(len == null) {
		return new Uint8Array(bytes.b.bufferValue,byteOffset);
	}
	return new Uint8Array(bytes.b.bufferValue,byteOffset,len);
};
clay_buffers_Uint8Array.toBytes = function(this1) {
	return new haxe_io_Bytes(new Uint8Array(this1.buffer));
};
clay_buffers_Uint8Array.toString = function(this1) {
	return "Uint8Array [byteLength:" + this1.byteLength + ", length:" + this1.length + "]";
};
var clay_graphics_Color = function(r,g,b,a) {
	this.a = 1;
	this.b = 0;
	this.g = 0;
	this.r = 0;
	if(r != null) {
		this.r = r;
	}
	if(g != null) {
		this.g = g;
	}
	if(b != null) {
		this.b = b;
	}
	if(a != null) {
		this.a = a;
	}
};
clay_graphics_Color.__name__ = true;
var clay_graphics_Shader = function() {
	this.gpuShader = null;
	this.uniforms = null;
	this.textures = null;
	this.attributes = null;
	this.fragSource = null;
	this.vertSource = null;
	clay_Resource.call(this);
};
clay_graphics_Shader.__name__ = true;
clay_graphics_Shader.__super__ = clay_Resource;
clay_graphics_Shader.prototype = $extend(clay_Resource.prototype,{
	init: function() {
		this.gpuShader = clay_opengl_GLGraphics.createShader(this.vertSource,this.fragSource,this.attributes,this.textures);
		if(this.gpuShader == null) {
			throw haxe_Exception.thrown("Failed to create shader (id=" + this.id + ")");
		}
		this.uniforms = new clay_graphics_Uniforms(this.gpuShader);
	}
	,activate: function() {
		var shader = this.gpuShader;
		if(clay_opengl_GLGraphics._boundProgram != shader.program) {
			clay_opengl_GLGraphics._boundProgram = shader.program;
			clay_opengl_web_GL.gl.useProgram(shader.program);
		}
		if(this.uniforms != null) {
			this.uniforms.apply();
		}
	}
	,destroy: function() {
		clay_opengl_GLGraphics.deleteShader(this.gpuShader);
	}
});
var clay_graphics_Texture = function() {
	this.wrapT = 33071;
	this.wrapS = 33071;
	this.filterMag = 9729;
	this.filterMin = 9729;
	this.pixels = null;
	this.heightActual = -1;
	this.widthActual = -1;
	this.height = -1;
	this.width = -1;
	this.dataType = 5121;
	this.type = 3553;
	this.format = 6408;
	this.compressed = false;
	this.textureId = null;
	clay_Resource.call(this);
	this.index = clay_graphics_Texture._nextIndex++;
};
clay_graphics_Texture.__name__ = true;
clay_graphics_Texture.fromImage = function(image) {
	var texture = new clay_graphics_Texture();
	if(image.bitsPerPixel != 4) {
		throw haxe_Exception.thrown("Image must have 4 bits per pixels (RGBA format)");
	}
	texture.width = image.width;
	texture.height = image.height;
	texture.widthActual = image.widthActual;
	texture.heightActual = image.heightActual;
	texture.pixels = image.pixels;
	return texture;
};
clay_graphics_Texture.__super__ = clay_Resource;
clay_graphics_Texture.prototype = $extend(clay_Resource.prototype,{
	set_filterMin: function(filterMin) {
		if(this.textureId != null) {
			this.bind();
			clay_opengl_web_GL.gl.texParameteri(3553,10241,filterMin);
		}
		return this.filterMin = filterMin;
	}
	,set_filterMag: function(filterMag) {
		if(this.textureId != null) {
			this.bind();
			clay_opengl_web_GL.gl.texParameteri(3553,10240,filterMag);
		}
		return this.filterMag = filterMag;
	}
	,set_wrapS: function(wrapS) {
		if(this.textureId != null) {
			this.bind();
			clay_opengl_web_GL.gl.texParameteri(3553,10242,wrapS);
		}
		return this.wrapS = wrapS;
	}
	,set_wrapT: function(wrapT) {
		if(this.textureId != null) {
			this.bind();
			clay_opengl_web_GL.gl.texParameteri(3553,10243,wrapT);
		}
		return this.wrapT = wrapT;
	}
	,init: function() {
		this.textureId = clay_opengl_web_GL.gl.createTexture();
		if(this.width > 0 && this.widthActual <= 0) {
			this.widthActual = this.width;
		}
		if(this.height > 0 && this.heightActual <= 0) {
			this.heightActual = this.height;
		}
		this.bind();
		clay_opengl_web_GL.gl.texParameteri(3553,10241,this.filterMin);
		clay_opengl_web_GL.gl.texParameteri(3553,10240,this.filterMag);
		clay_opengl_web_GL.gl.texParameteri(3553,10243,this.wrapT);
		clay_opengl_web_GL.gl.texParameteri(3553,10242,this.wrapS);
		if(this.pixels != null) {
			if(this.width <= 0 || this.height <= 0) {
				throw haxe_Exception.thrown("Provided texture pixels with invalid size (width=" + this.width + " height=" + this.height + ")");
			}
			this.submit(this.pixels);
		}
	}
	,destroy: function() {
		if(this.textureId != null) {
			clay_opengl_web_GL.gl.deleteTexture(this.textureId);
			this.textureId = null;
		}
	}
	,bind: function(slot) {
		if(slot == null) {
			slot = 0;
		}
		if(slot != -1) {
			if(clay_opengl_GLGraphics._activeTextureSlot != slot) {
				clay_opengl_GLGraphics._activeTextureSlot = slot;
				while(clay_opengl_GLGraphics._boundTexture2D.length <= clay_opengl_GLGraphics._activeTextureSlot) clay_opengl_GLGraphics._boundTexture2D.push(null);
				clay_opengl_web_GL.gl.activeTexture(33984 + slot);
			}
		}
		if(this.type == 3553) {
			var textureId = this.textureId;
			if(clay_opengl_GLGraphics._boundTexture2D[clay_opengl_GLGraphics._activeTextureSlot] != textureId) {
				clay_opengl_GLGraphics._boundTexture2D[clay_opengl_GLGraphics._activeTextureSlot] = textureId;
				clay_opengl_web_GL.gl.bindTexture(3553,textureId);
			}
		}
	}
	,submit: function(pixels) {
		var size = clay_opengl_web_GL.gl.getParameter(3379);
		if(size <= 0) {
			size = 4096;
		}
		var max = size;
		if(pixels == null) {
			pixels = this.pixels;
		}
		if(pixels == null) {
			throw haxe_Exception.thrown("Cannot submit texture pixels: pixels is null");
		}
		if(this.widthActual > max) {
			throw haxe_Exception.thrown("Texture actual width bigger than maximum hardware size (width=" + this.widthActual + " max=" + max + ")");
		}
		if(this.heightActual > max) {
			throw haxe_Exception.thrown("Texture actual height bigger than maximum hardware size (height=" + this.heightActual + " max=" + max + ")");
		}
		this.bind();
		if(this.type == 3553) {
			if(this.compressed) {
				clay_opengl_web_GL.gl.compressedTexImage2D(3553,0,this.format,this.widthActual,this.heightActual,0,pixels);
			} else {
				var format = this.format;
				clay_opengl_web_GL.gl.texImage2D(3553,0,format,this.widthActual,this.heightActual,0,format,this.dataType,pixels);
			}
		}
	}
	,fetch: function(into,x,y,w,h) {
		if(h == null) {
			h = -1;
		}
		if(w == null) {
			w = -1;
		}
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		if(w <= 0) {
			w = this.width;
		}
		if(h <= 0) {
			h = this.height;
		}
		this.bind();
		if(this.type == 3553) {
			clay_opengl_GLGraphics.fetchTexture2dPixels(into,x,y,w,h);
		}
		return into;
	}
});
var clay_graphics_TextureAndSlot = function(texture,slot) {
	this.texture = texture;
	this.slot = slot;
};
clay_graphics_TextureAndSlot.__name__ = true;
var clay_graphics_Uniforms = function(gpuShader) {
	this.dirtyTextures = [];
	this.dirtyColors = [];
	this.dirtyMatrix4s = [];
	this.dirtyVector4s = [];
	this.dirtyVector3s = [];
	this.dirtyVector2s = [];
	this.dirtyFloatArrays = [];
	this.dirtyFloats = [];
	this.dirtyInts = [];
	this.textures = new haxe_ds_StringMap();
	this.colors = new haxe_ds_StringMap();
	this.matrix4s = new haxe_ds_StringMap();
	this.vector4s = new haxe_ds_StringMap();
	this.vector3s = new haxe_ds_StringMap();
	this.vector2s = new haxe_ds_StringMap();
	this.floatArrays = new haxe_ds_StringMap();
	this.floats = new haxe_ds_StringMap();
	this.ints = new haxe_ds_StringMap();
	this.gpuShader = gpuShader;
};
clay_graphics_Uniforms.__name__ = true;
clay_graphics_Uniforms.prototype = {
	setInt: function(name,value) {
		var location = clay_opengl_web_GL.gl.getUniformLocation(this.gpuShader.program,name);
		this.ints.h[name] = value;
		this.dirtyInts.push(name);
	}
	,setFloat: function(name,value) {
		var location = clay_opengl_web_GL.gl.getUniformLocation(this.gpuShader.program,name);
		this.floats.h[name] = value;
		this.dirtyFloats.push(name);
	}
	,setFloatArray: function(name,value) {
		var location = clay_opengl_web_GL.gl.getUniformLocation(this.gpuShader.program,name);
		this.floatArrays.h[name] = value;
		this.dirtyFloatArrays.push(name);
	}
	,setVector2: function(name,x,y) {
		var location = clay_opengl_web_GL.gl.getUniformLocation(this.gpuShader.program,name);
		var existing = this.vector2s.h[name];
		if(existing != null) {
			existing.x = x;
			existing.y = y;
		} else {
			var this1 = this.vector2s;
			var value = new clay_graphics_Vector2(x,y);
			this1.h[name] = value;
		}
		this.dirtyVector2s.push(name);
	}
	,setVector3: function(name,x,y,z) {
		var location = clay_opengl_web_GL.gl.getUniformLocation(this.gpuShader.program,name);
		var existing = this.vector3s.h[name];
		if(existing != null) {
			existing.x = x;
			existing.y = y;
			existing.z = z;
		} else {
			var this1 = this.vector3s;
			var value = new clay_graphics_Vector3(x,y,z);
			this1.h[name] = value;
		}
		this.dirtyVector3s.push(name);
	}
	,setVector4: function(name,x,y,z,w) {
		var location = clay_opengl_web_GL.gl.getUniformLocation(this.gpuShader.program,name);
		var existing = this.vector4s.h[name];
		if(existing != null) {
			existing.x = x;
			existing.y = y;
			existing.z = z;
			existing.w = w;
		} else {
			var this1 = this.vector4s;
			var value = new clay_graphics_Vector4(x,y,z,w);
			this1.h[name] = value;
		}
		this.dirtyVector4s.push(name);
	}
	,setMatrix4: function(name,value) {
		var location = clay_opengl_web_GL.gl.getUniformLocation(this.gpuShader.program,name);
		var existing = this.matrix4s.h[name];
		if(existing == null) {
			var this1 = new Float32Array(16);
			existing = this1;
			this.matrix4s.h[name] = existing;
		}
		existing[0] = value[0];
		existing[1] = value[1];
		existing[2] = value[2];
		existing[3] = value[3];
		existing[4] = value[4];
		existing[5] = value[5];
		existing[6] = value[6];
		existing[7] = value[7];
		existing[8] = value[8];
		existing[9] = value[9];
		existing[10] = value[10];
		existing[11] = value[11];
		existing[12] = value[12];
		existing[13] = value[13];
		existing[14] = value[14];
		existing[15] = value[15];
		this.dirtyMatrix4s.push(name);
	}
	,setColor: function(name,r,g,b,a) {
		var location = clay_opengl_web_GL.gl.getUniformLocation(this.gpuShader.program,name);
		var existing = this.colors.h[name];
		if(existing != null) {
			existing.r = r;
			existing.g = g;
			existing.b = b;
			existing.a = a;
		} else {
			var this1 = this.colors;
			var value = new clay_graphics_Color(r,g,b,a);
			this1.h[name] = value;
		}
		this.dirtyColors.push(name);
	}
	,setTexture: function(name,slot,texture) {
		var location = clay_opengl_web_GL.gl.getUniformLocation(this.gpuShader.program,name);
		var existing = this.textures.h[name];
		if(existing != null) {
			existing.texture = texture;
			existing.slot = slot;
		} else {
			var this1 = this.textures;
			var value = new clay_graphics_TextureAndSlot(texture,slot);
			this1.h[name] = value;
		}
		if(this.dirtyTextures.indexOf(name) == -1) {
			this.dirtyTextures.push(name);
		}
	}
	,apply: function() {
		var shader = this.gpuShader;
		if(clay_opengl_GLGraphics._boundProgram != shader.program) {
			clay_opengl_GLGraphics._boundProgram = shader.program;
			clay_opengl_web_GL.gl.useProgram(shader.program);
		}
		while(this.dirtyInts.length > 0) {
			var name = this.dirtyInts.pop();
			var location = clay_opengl_web_GL.gl.getUniformLocation(this.gpuShader.program,name);
			var shader = this.gpuShader;
			var value = this.ints.h[name];
			if(clay_opengl_GLGraphics._boundProgram != shader.program) {
				clay_opengl_GLGraphics._boundProgram = shader.program;
				clay_opengl_web_GL.gl.useProgram(shader.program);
			}
			clay_opengl_web_GL.gl.uniform1i(location,value);
		}
		while(this.dirtyFloats.length > 0) {
			var name = this.dirtyFloats.pop();
			var location = clay_opengl_web_GL.gl.getUniformLocation(this.gpuShader.program,name);
			var shader = this.gpuShader;
			var value = this.floats.h[name];
			if(clay_opengl_GLGraphics._boundProgram != shader.program) {
				clay_opengl_GLGraphics._boundProgram = shader.program;
				clay_opengl_web_GL.gl.useProgram(shader.program);
			}
			clay_opengl_web_GL.gl.uniform1f(location,value);
		}
		while(this.dirtyFloatArrays.length > 0) {
			var name = this.dirtyFloatArrays.pop();
			var location = clay_opengl_web_GL.gl.getUniformLocation(this.gpuShader.program,name);
			var shader = this.gpuShader;
			var value = this.floatArrays.h[name];
			if(clay_opengl_GLGraphics._boundProgram != shader.program) {
				clay_opengl_GLGraphics._boundProgram = shader.program;
				clay_opengl_web_GL.gl.useProgram(shader.program);
			}
			clay_opengl_web_GL.gl.uniform1fv(location,value);
		}
		while(this.dirtyVector2s.length > 0) {
			var name = this.dirtyVector2s.pop();
			var location = clay_opengl_web_GL.gl.getUniformLocation(this.gpuShader.program,name);
			var value = this.vector2s.h[name];
			var shader = this.gpuShader;
			var x = value.x;
			var y = value.y;
			if(clay_opengl_GLGraphics._boundProgram != shader.program) {
				clay_opengl_GLGraphics._boundProgram = shader.program;
				clay_opengl_web_GL.gl.useProgram(shader.program);
			}
			clay_opengl_web_GL.gl.uniform2f(location,x,y);
		}
		while(this.dirtyVector3s.length > 0) {
			var name = this.dirtyVector3s.pop();
			var location = clay_opengl_web_GL.gl.getUniformLocation(this.gpuShader.program,name);
			var value = this.vector3s.h[name];
			var shader = this.gpuShader;
			var x = value.x;
			var y = value.y;
			var z = value.z;
			if(clay_opengl_GLGraphics._boundProgram != shader.program) {
				clay_opengl_GLGraphics._boundProgram = shader.program;
				clay_opengl_web_GL.gl.useProgram(shader.program);
			}
			clay_opengl_web_GL.gl.uniform3f(location,x,y,z);
		}
		while(this.dirtyVector4s.length > 0) {
			var name = this.dirtyVector4s.pop();
			var location = clay_opengl_web_GL.gl.getUniformLocation(this.gpuShader.program,name);
			var value = this.vector4s.h[name];
			var shader = this.gpuShader;
			var x = value.x;
			var y = value.y;
			var z = value.z;
			var w = value.w;
			if(clay_opengl_GLGraphics._boundProgram != shader.program) {
				clay_opengl_GLGraphics._boundProgram = shader.program;
				clay_opengl_web_GL.gl.useProgram(shader.program);
			}
			clay_opengl_web_GL.gl.uniform4f(location,x,y,z,w);
		}
		while(this.dirtyMatrix4s.length > 0) {
			var name = this.dirtyMatrix4s.pop();
			var location = clay_opengl_web_GL.gl.getUniformLocation(this.gpuShader.program,name);
			var shader = this.gpuShader;
			var value = this.matrix4s.h[name];
			if(clay_opengl_GLGraphics._boundProgram != shader.program) {
				clay_opengl_GLGraphics._boundProgram = shader.program;
				clay_opengl_web_GL.gl.useProgram(shader.program);
			}
			clay_opengl_web_GL.gl.uniformMatrix4fv(location,false,value);
		}
		while(this.dirtyColors.length > 0) {
			var name = this.dirtyColors.pop();
			var location = clay_opengl_web_GL.gl.getUniformLocation(this.gpuShader.program,name);
			var value = this.colors.h[name];
			var shader = this.gpuShader;
			var r = value.r;
			var g = value.g;
			var b = value.b;
			var a = value.a;
			if(clay_opengl_GLGraphics._boundProgram != shader.program) {
				clay_opengl_GLGraphics._boundProgram = shader.program;
				clay_opengl_web_GL.gl.useProgram(shader.program);
			}
			clay_opengl_web_GL.gl.uniform4f(location,r,g,b,a);
		}
		var _g = 0;
		var _g1 = this.dirtyTextures.length;
		while(_g < _g1) {
			var i = _g++;
			var name = this.dirtyTextures[i];
			var location = clay_opengl_web_GL.gl.getUniformLocation(this.gpuShader.program,name);
			var value = this.textures.h[name];
			if(value.texture.type == 3553) {
				clay_opengl_GLGraphics.setTexture2dUniform(this.gpuShader,location,value.slot,value.texture.textureId);
			}
		}
	}
	,clone: function() {
		var uniforms = new clay_graphics_Uniforms(this.gpuShader);
		return uniforms;
	}
};
var clay_graphics_Vector2 = function(x,y) {
	this.y = 0;
	this.x = 0;
	if(x != null) {
		this.x = x;
	}
	if(y != null) {
		this.y = y;
	}
};
clay_graphics_Vector2.__name__ = true;
var clay_graphics_Vector3 = function(x,y,z) {
	this.z = 0;
	this.y = 0;
	this.x = 0;
	if(x != null) {
		this.x = x;
	}
	if(y != null) {
		this.y = y;
	}
	if(z != null) {
		this.z = z;
	}
};
clay_graphics_Vector3.__name__ = true;
var clay_graphics_Vector4 = function(x,y,z,w) {
	this.w = 0;
	this.z = 0;
	this.y = 0;
	this.x = 0;
	if(x != null) {
		this.x = x;
	}
	if(y != null) {
		this.y = y;
	}
	if(z != null) {
		this.z = z;
	}
	if(w != null) {
		this.w = w;
	}
};
clay_graphics_Vector4.__name__ = true;
var clay_opengl_GLGraphics = function() { };
clay_opengl_GLGraphics.__name__ = true;
clay_opengl_GLGraphics.setup = function() {
	clay_opengl_GLGraphics._defaultFramebuffer = clay_opengl_web_GL.gl.getParameter(36006);
	clay_opengl_GLGraphics._defaultRenderbuffer = clay_opengl_web_GL.gl.getParameter(36007);
	clay_opengl_GLGraphics._didFetchDefaultBuffers = true;
};
clay_opengl_GLGraphics.clear = function(r,g,b,a,clearDepth) {
	if(clearDepth == null) {
		clearDepth = true;
	}
	clay_opengl_web_GL.gl.clearColor(r,g,b,a);
	if(clearDepth && clay_Clay.app.config.render.depth > 0) {
		clay_opengl_web_GL.gl.clear(16640);
		clay_opengl_web_GL.gl.clearDepth(1.0);
	} else {
		clay_opengl_web_GL.gl.clear(16384);
	}
};
clay_opengl_GLGraphics.createTextureId = function() {
	return clay_opengl_web_GL.gl.createTexture();
};
clay_opengl_GLGraphics.setActiveTexture = function(slot) {
	if(clay_opengl_GLGraphics._activeTextureSlot != slot) {
		clay_opengl_GLGraphics._activeTextureSlot = slot;
		while(clay_opengl_GLGraphics._boundTexture2D.length <= clay_opengl_GLGraphics._activeTextureSlot) clay_opengl_GLGraphics._boundTexture2D.push(null);
		clay_opengl_web_GL.gl.activeTexture(33984 + slot);
	}
};
clay_opengl_GLGraphics.deleteTexture = function(textureId) {
	clay_opengl_web_GL.gl.deleteTexture(textureId);
};
clay_opengl_GLGraphics.setViewport = function(x,y,width,height) {
	clay_opengl_web_GL.gl.viewport(x,y,width,height);
};
clay_opengl_GLGraphics.bindTexture2d = function(textureId) {
	if(clay_opengl_GLGraphics._boundTexture2D[clay_opengl_GLGraphics._activeTextureSlot] != textureId) {
		clay_opengl_GLGraphics._boundTexture2D[clay_opengl_GLGraphics._activeTextureSlot] = textureId;
		clay_opengl_web_GL.gl.bindTexture(3553,textureId);
	}
};
clay_opengl_GLGraphics.maxTextureSize = function() {
	var size = clay_opengl_web_GL.gl.getParameter(3379);
	if(size <= 0) {
		size = 4096;
	}
	return size;
};
clay_opengl_GLGraphics.submitCompressedTexture2dPixels = function(level,format,width,height,pixels) {
	clay_opengl_web_GL.gl.compressedTexImage2D(3553,level,format,width,height,0,pixels);
};
clay_opengl_GLGraphics.submitTexture2dPixels = function(level,format,width,height,dataType,pixels) {
	clay_opengl_web_GL.gl.texImage2D(3553,level,format,width,height,0,format,dataType,pixels);
};
clay_opengl_GLGraphics.fetchTexture2dPixels = function(into,x,y,w,h) {
	if(into == null) {
		throw haxe_Exception.thrown("Texture fetch requires a valid buffer to store the pixels.");
	}
	var textureId = clay_opengl_GLGraphics._boundTexture2D[clay_opengl_GLGraphics._activeTextureSlot];
	var required = w * h * 4;
	if(into.length < required) {
		throw haxe_Exception.thrown("Texture fetch requires at least " + required + " (w * h * 4) bytes for the pixels, you have " + into.length + "!");
	}
	var fb = clay_opengl_web_GL.gl.createFramebuffer();
	clay_opengl_web_GL.gl.bindFramebuffer(36160,fb);
	clay_opengl_web_GL.gl.framebufferTexture2D(36160,36064,3553,textureId,0);
	if(clay_opengl_web_GL.gl.checkFramebufferStatus(36160) != 36053) {
		throw haxe_Exception.thrown("Incomplete framebuffer");
	}
	clay_opengl_web_GL.gl.readPixels(x,y,w,h,6408,5121,into);
	clay_opengl_web_GL.gl.bindFramebuffer(36160,null);
	clay_opengl_web_GL.gl.deleteFramebuffer(fb);
	fb = null;
};
clay_opengl_GLGraphics.createFramebuffer = function() {
	return clay_opengl_web_GL.gl.createFramebuffer();
};
clay_opengl_GLGraphics.bindFramebuffer = function(framebuffer) {
	if(clay_opengl_GLGraphics._boundFramebuffer != framebuffer) {
		clay_opengl_GLGraphics._boundFramebuffer = framebuffer;
		if(framebuffer == null) {
			framebuffer = clay_opengl_GLGraphics._defaultFramebuffer;
		}
		clay_opengl_web_GL.gl.bindFramebuffer(36160,framebuffer);
	}
};
clay_opengl_GLGraphics.createRenderbuffer = function() {
	return clay_opengl_web_GL.gl.createRenderbuffer();
};
clay_opengl_GLGraphics.bindRenderbuffer = function(renderbuffer) {
	if(clay_opengl_GLGraphics._boundRenderbuffer != renderbuffer) {
		clay_opengl_GLGraphics._boundRenderbuffer = renderbuffer;
		if(renderbuffer == null) {
			renderbuffer = clay_opengl_GLGraphics._defaultRenderbuffer;
		}
		clay_opengl_web_GL.gl.bindRenderbuffer(36161,renderbuffer);
	}
};
clay_opengl_GLGraphics.setTexture2dMinFilter = function(minFilter) {
	clay_opengl_web_GL.gl.texParameteri(3553,10241,minFilter);
};
clay_opengl_GLGraphics.setTexture2dMagFilter = function(magFilter) {
	clay_opengl_web_GL.gl.texParameteri(3553,10240,magFilter);
};
clay_opengl_GLGraphics.setTexture2dWrapS = function(wrapS) {
	clay_opengl_web_GL.gl.texParameteri(3553,10242,wrapS);
};
clay_opengl_GLGraphics.setTexture2dWrapT = function(wrapT) {
	clay_opengl_web_GL.gl.texParameteri(3553,10243,wrapT);
};
clay_opengl_GLGraphics.configureRenderTargetBuffersStorage = function(renderTarget,textureId,width,height,stencil,antialiasing) {
	var framebuffer = renderTarget.framebuffer;
	var renderbuffer = renderTarget.renderbuffer;
	clay_opengl_GLGraphics.bindFramebuffer(framebuffer);
	clay_opengl_GLGraphics.bindRenderbuffer(renderbuffer);
	if(stencil) {
		clay_opengl_web_GL.gl.renderbufferStorage(36161,34041,width,height);
	} else {
		clay_opengl_web_GL.gl.renderbufferStorage(36161,33189,width,height);
	}
	clay_opengl_web_GL.gl.framebufferTexture2D(36160,36064,3553,textureId,0);
	if(stencil) {
		clay_opengl_web_GL.gl.framebufferRenderbuffer(36160,33306,36161,renderbuffer);
	} else {
		clay_opengl_web_GL.gl.framebufferRenderbuffer(36160,36096,36161,renderbuffer);
	}
	var status = clay_opengl_web_GL.gl.checkFramebufferStatus(36160);
	switch(status) {
	case 36053:
		break;
	case 36054:
		throw haxe_Exception.thrown("Incomplete framebuffer: FRAMEBUFFER_INCOMPLETE_ATTACHMENT");
	case 36055:
		throw haxe_Exception.thrown("Incomplete framebuffer: FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT");
	case 36057:
		throw haxe_Exception.thrown("Incomplete framebuffer: FRAMEBUFFER_INCOMPLETE_DIMENSIONS");
	case 36061:
		throw haxe_Exception.thrown("Incomplete framebuffer: FRAMEBUFFER_UNSUPPORTED");
	default:
		throw haxe_Exception.thrown("Incomplete framebuffer: " + status);
	}
	clay_opengl_GLGraphics.bindFramebuffer(null);
	clay_opengl_GLGraphics.bindRenderbuffer(null);
};
clay_opengl_GLGraphics.createRenderTarget = function(textureId,width,height,stencil,antialiasing) {
	var renderTarget = new clay_opengl_GLGraphics_$RenderTarget();
	renderTarget.framebuffer = clay_opengl_web_GL.gl.createFramebuffer();
	renderTarget.renderbuffer = clay_opengl_web_GL.gl.createRenderbuffer();
	var framebuffer = renderTarget.framebuffer;
	var renderbuffer = renderTarget.renderbuffer;
	clay_opengl_GLGraphics.bindFramebuffer(framebuffer);
	clay_opengl_GLGraphics.bindRenderbuffer(renderbuffer);
	if(stencil) {
		clay_opengl_web_GL.gl.renderbufferStorage(36161,34041,width,height);
	} else {
		clay_opengl_web_GL.gl.renderbufferStorage(36161,33189,width,height);
	}
	clay_opengl_web_GL.gl.framebufferTexture2D(36160,36064,3553,textureId,0);
	if(stencil) {
		clay_opengl_web_GL.gl.framebufferRenderbuffer(36160,33306,36161,renderbuffer);
	} else {
		clay_opengl_web_GL.gl.framebufferRenderbuffer(36160,36096,36161,renderbuffer);
	}
	var status = clay_opengl_web_GL.gl.checkFramebufferStatus(36160);
	switch(status) {
	case 36053:
		break;
	case 36054:
		throw haxe_Exception.thrown("Incomplete framebuffer: FRAMEBUFFER_INCOMPLETE_ATTACHMENT");
	case 36055:
		throw haxe_Exception.thrown("Incomplete framebuffer: FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT");
	case 36057:
		throw haxe_Exception.thrown("Incomplete framebuffer: FRAMEBUFFER_INCOMPLETE_DIMENSIONS");
	case 36061:
		throw haxe_Exception.thrown("Incomplete framebuffer: FRAMEBUFFER_UNSUPPORTED");
	default:
		throw haxe_Exception.thrown("Incomplete framebuffer: " + status);
	}
	clay_opengl_GLGraphics.bindFramebuffer(null);
	clay_opengl_GLGraphics.bindRenderbuffer(null);
	return renderTarget;
};
clay_opengl_GLGraphics.deleteRenderTarget = function(renderTarget) {
	if(renderTarget.framebuffer != null) {
		clay_opengl_web_GL.gl.deleteFramebuffer(renderTarget.framebuffer);
		renderTarget.framebuffer = null;
	}
	if(renderTarget.renderbuffer != null) {
		clay_opengl_web_GL.gl.deleteRenderbuffer(renderTarget.renderbuffer);
		renderTarget.renderbuffer = null;
	}
};
clay_opengl_GLGraphics.setRenderTarget = function(renderTarget) {
	if(renderTarget != null) {
		clay_opengl_GLGraphics.bindFramebuffer(renderTarget.framebuffer);
		clay_opengl_GLGraphics.bindRenderbuffer(renderTarget.renderbuffer);
	} else {
		clay_opengl_GLGraphics.bindFramebuffer(null);
		clay_opengl_GLGraphics.bindRenderbuffer(null);
	}
};
clay_opengl_GLGraphics.enableBlending = function() {
	clay_opengl_web_GL.gl.enable(3042);
};
clay_opengl_GLGraphics.disableBlending = function() {
	clay_opengl_web_GL.gl.disable(3042);
};
clay_opengl_GLGraphics.createShader = function(vertSource,fragSource,attributes,textures) {
	if(vertSource == null) {
		throw haxe_Exception.thrown("Cannot create shader: vertSource is null!");
	}
	if(fragSource == null) {
		throw haxe_Exception.thrown("Cannot create shader: fragSource is null!");
	}
	var shader = new clay_opengl_GLGraphics_$GpuShader();
	shader.vertShader = clay_opengl_GLGraphics.compileGLShader(35633,vertSource);
	if(shader.vertShader == null) {
		clay_opengl_GLGraphics.deleteShader(shader);
		return null;
	}
	shader.fragShader = clay_opengl_GLGraphics.compileGLShader(35632,fragSource);
	if(shader.fragShader == null) {
		clay_opengl_GLGraphics.deleteShader(shader);
		return null;
	}
	if(!clay_opengl_GLGraphics.linkShader(shader,attributes)) {
		clay_opengl_GLGraphics.deleteShader(shader);
		return null;
	}
	if(textures != null) {
		clay_opengl_GLGraphics.configureShaderTextureSlots(shader,textures);
	}
	return shader;
};
clay_opengl_GLGraphics.linkShader = function(shader,attributes) {
	var program = clay_opengl_web_GL.gl.createProgram();
	clay_opengl_web_GL.gl.attachShader(program,shader.vertShader);
	clay_opengl_web_GL.gl.attachShader(program,shader.fragShader);
	if(attributes != null) {
		var _g = 0;
		var _g1 = attributes.length;
		while(_g < _g1) {
			var i = _g++;
			clay_opengl_web_GL.gl.bindAttribLocation(program,i,attributes[i]);
		}
	}
	clay_opengl_web_GL.gl.linkProgram(program);
	if(clay_opengl_web_GL.gl.getProgramParameter(program,35714) == 0) {
		clay_Log.error("\tFailed to link shader program:",{ fileName : "src/clay/opengl/GLGraphics.hx", lineNumber : 521, className : "clay.opengl.GLGraphics", methodName : "linkShader"});
		var items = clay_opengl_web_GL.gl.getProgramInfoLog(program).split("\n");
		var _g = [];
		var _g1 = 0;
		var _g2 = items;
		while(_g1 < _g2.length) {
			var v = _g2[_g1];
			++_g1;
			if(StringTools.trim(v) != "") {
				_g.push(v);
			}
		}
		items = _g;
		var result = new Array(items.length);
		var _g = 0;
		var _g1 = items.length;
		while(_g < _g1) {
			var i = _g++;
			result[i] = "\t\t" + StringTools.trim(items[i]);
		}
		items = result;
		clay_Log.error(items.join("\n"),{ fileName : "src/clay/opengl/GLGraphics.hx", lineNumber : 522, className : "clay.opengl.GLGraphics", methodName : "linkShader"});
		clay_opengl_web_GL.gl.deleteProgram(program);
		return false;
	}
	shader.program = program;
	return true;
};
clay_opengl_GLGraphics.configureShaderTextureSlots = function(shader,textures) {
	if(clay_opengl_GLGraphics._boundProgram != shader.program) {
		clay_opengl_GLGraphics._boundProgram = shader.program;
		clay_opengl_web_GL.gl.useProgram(shader.program);
	}
	var _g = 0;
	var _g1 = textures.length;
	while(_g < _g1) {
		var i = _g++;
		var texture = textures[i];
		var attr = clay_opengl_web_GL.gl.getUniformLocation(shader.program,texture);
		if(attr != null) {
			clay_opengl_web_GL.gl.uniform1i(attr,i);
			shader.textures[i] = texture;
		}
	}
};
clay_opengl_GLGraphics.useShader = function(shader) {
	if(clay_opengl_GLGraphics._boundProgram != shader.program) {
		clay_opengl_GLGraphics._boundProgram = shader.program;
		clay_opengl_web_GL.gl.useProgram(shader.program);
	}
};
clay_opengl_GLGraphics.deleteShader = function(shader) {
	if(shader.vertShader != null) {
		clay_opengl_web_GL.gl.deleteShader(shader.vertShader);
		shader.vertShader = null;
	}
	if(shader.fragShader != null) {
		clay_opengl_web_GL.gl.deleteShader(shader.fragShader);
		shader.fragShader = null;
	}
	if(shader.program != null) {
		clay_opengl_web_GL.gl.deleteProgram(shader.program);
		shader.program = null;
	}
};
clay_opengl_GLGraphics.compileGLShader = function(type,source) {
	var shader = clay_opengl_web_GL.gl.createShader(type);
	clay_opengl_web_GL.gl.shaderSource(shader,source);
	clay_opengl_web_GL.gl.compileShader(shader);
	var compileLog = clay_opengl_web_GL.gl.getShaderInfoLog(shader);
	var log = "";
	if(compileLog != null && compileLog.length > 0) {
		var isFrag = type == 35632;
		var typeName = isFrag ? "frag" : "vert";
		log += "\n\t// start -- (" + typeName + ") compile log --\n";
		var items = compileLog.split("\n");
		var _g = [];
		var _g1 = 0;
		var _g2 = items;
		while(_g1 < _g2.length) {
			var v = _g2[_g1];
			++_g1;
			if(StringTools.trim(v) != "") {
				_g.push(v);
			}
		}
		items = _g;
		var result = new Array(items.length);
		var _g = 0;
		var _g1 = items.length;
		while(_g < _g1) {
			var i = _g++;
			result[i] = "\t\t" + StringTools.trim(items[i]);
		}
		items = result;
		log += items.join("\n");
		log += "\n\t// end --\n";
	}
	if(clay_opengl_web_GL.gl.getShaderParameter(shader,35713) == 0) {
		clay_Log.error("GL / Failed to compile shader:",{ fileName : "src/clay/opengl/GLGraphics.hx", lineNumber : 605, className : "clay.opengl.GLGraphics", methodName : "compileGLShader"});
		var tmp;
		if(log.length == 0) {
			var items = clay_opengl_web_GL.gl.getShaderInfoLog(shader).split("\n");
			var _g = [];
			var _g1 = 0;
			var _g2 = items;
			while(_g1 < _g2.length) {
				var v = _g2[_g1];
				++_g1;
				if(StringTools.trim(v) != "") {
					_g.push(v);
				}
			}
			items = _g;
			var result = new Array(items.length);
			var _g = 0;
			var _g1 = items.length;
			while(_g < _g1) {
				var i = _g++;
				result[i] = "\t\t" + StringTools.trim(items[i]);
			}
			items = result;
			tmp = items.join("\n");
		} else {
			tmp = log;
		}
		clay_Log.error(tmp,{ fileName : "src/clay/opengl/GLGraphics.hx", lineNumber : 606, className : "clay.opengl.GLGraphics", methodName : "compileGLShader"});
		clay_opengl_web_GL.gl.deleteShader(shader);
		shader = null;
	}
	return shader;
};
clay_opengl_GLGraphics.getUniformLocation = function(shader,name) {
	return clay_opengl_web_GL.gl.getUniformLocation(shader.program,name);
};
clay_opengl_GLGraphics.setIntUniform = function(shader,location,value) {
	if(clay_opengl_GLGraphics._boundProgram != shader.program) {
		clay_opengl_GLGraphics._boundProgram = shader.program;
		clay_opengl_web_GL.gl.useProgram(shader.program);
	}
	clay_opengl_web_GL.gl.uniform1i(location,value);
};
clay_opengl_GLGraphics.setFloatUniform = function(shader,location,value) {
	if(clay_opengl_GLGraphics._boundProgram != shader.program) {
		clay_opengl_GLGraphics._boundProgram = shader.program;
		clay_opengl_web_GL.gl.useProgram(shader.program);
	}
	clay_opengl_web_GL.gl.uniform1f(location,value);
};
clay_opengl_GLGraphics.setFloatArrayUniform = function(shader,location,value) {
	if(clay_opengl_GLGraphics._boundProgram != shader.program) {
		clay_opengl_GLGraphics._boundProgram = shader.program;
		clay_opengl_web_GL.gl.useProgram(shader.program);
	}
	clay_opengl_web_GL.gl.uniform1fv(location,value);
};
clay_opengl_GLGraphics.setVector2Uniform = function(shader,location,x,y) {
	if(clay_opengl_GLGraphics._boundProgram != shader.program) {
		clay_opengl_GLGraphics._boundProgram = shader.program;
		clay_opengl_web_GL.gl.useProgram(shader.program);
	}
	clay_opengl_web_GL.gl.uniform2f(location,x,y);
};
clay_opengl_GLGraphics.setVector3Uniform = function(shader,location,x,y,z) {
	if(clay_opengl_GLGraphics._boundProgram != shader.program) {
		clay_opengl_GLGraphics._boundProgram = shader.program;
		clay_opengl_web_GL.gl.useProgram(shader.program);
	}
	clay_opengl_web_GL.gl.uniform3f(location,x,y,z);
};
clay_opengl_GLGraphics.setVector4Uniform = function(shader,location,x,y,z,w) {
	if(clay_opengl_GLGraphics._boundProgram != shader.program) {
		clay_opengl_GLGraphics._boundProgram = shader.program;
		clay_opengl_web_GL.gl.useProgram(shader.program);
	}
	clay_opengl_web_GL.gl.uniform4f(location,x,y,z,w);
};
clay_opengl_GLGraphics.setColorUniform = function(shader,location,r,g,b,a) {
	if(clay_opengl_GLGraphics._boundProgram != shader.program) {
		clay_opengl_GLGraphics._boundProgram = shader.program;
		clay_opengl_web_GL.gl.useProgram(shader.program);
	}
	clay_opengl_web_GL.gl.uniform4f(location,r,g,b,a);
};
clay_opengl_GLGraphics.setMatrix4Uniform = function(shader,location,value) {
	if(clay_opengl_GLGraphics._boundProgram != shader.program) {
		clay_opengl_GLGraphics._boundProgram = shader.program;
		clay_opengl_web_GL.gl.useProgram(shader.program);
	}
	clay_opengl_web_GL.gl.uniformMatrix4fv(location,false,value);
};
clay_opengl_GLGraphics.setTexture2dUniform = function(shader,location,slot,texture) {
	if(clay_opengl_GLGraphics._boundProgram != shader.program) {
		clay_opengl_GLGraphics._boundProgram = shader.program;
		clay_opengl_web_GL.gl.useProgram(shader.program);
	}
	clay_opengl_web_GL.gl.uniform1i(location,slot);
	if(clay_opengl_GLGraphics._activeTextureSlot != slot) {
		clay_opengl_GLGraphics._activeTextureSlot = slot;
		while(clay_opengl_GLGraphics._boundTexture2D.length <= clay_opengl_GLGraphics._activeTextureSlot) clay_opengl_GLGraphics._boundTexture2D.push(null);
		clay_opengl_web_GL.gl.activeTexture(33984 + slot);
	}
	if(clay_opengl_GLGraphics._boundTexture2D[clay_opengl_GLGraphics._activeTextureSlot] != texture) {
		clay_opengl_GLGraphics._boundTexture2D[clay_opengl_GLGraphics._activeTextureSlot] = texture;
		clay_opengl_web_GL.gl.bindTexture(3553,texture);
	}
};
clay_opengl_GLGraphics.setBlendFuncSeparate = function(srcRgb,dstRgb,srcAlpha,dstAlpha) {
	clay_opengl_web_GL.gl.blendFuncSeparate(srcRgb,dstRgb,srcAlpha,dstAlpha);
};
clay_opengl_GLGraphics.ensureNoError = function() {
	var error = clay_opengl_web_GL.gl.getError();
	if(error != 0) {
		throw haxe_Exception.thrown("Failed with GL error: " + error);
	}
};
var clay_opengl_GLGraphics_$RenderTarget = function() {
};
clay_opengl_GLGraphics_$RenderTarget.__name__ = true;
var clay_opengl_GLGraphics_$GpuShader = function() {
	this.textures = [];
};
clay_opengl_GLGraphics_$GpuShader.__name__ = true;
var clay_opengl_web_GL = function() { };
clay_opengl_web_GL.__name__ = true;
clay_opengl_web_GL.versionString = function() {
	var ver = clay_opengl_web_GL.gl.getParameter(7938);
	var slver = clay_opengl_web_GL.gl.getParameter(35724);
	var ren = clay_opengl_web_GL.gl.getParameter(7937);
	var ven = clay_opengl_web_GL.gl.getParameter(7936);
	return "/ " + ver + " / " + slver + " / " + ren + " / " + ven + " /";
};
clay_opengl_web_GL.activeTexture = function(texture) {
	clay_opengl_web_GL.gl.activeTexture(texture);
};
clay_opengl_web_GL.attachShader = function(program,shader) {
	clay_opengl_web_GL.gl.attachShader(program,shader);
};
clay_opengl_web_GL.bindAttribLocation = function(program,index,name) {
	clay_opengl_web_GL.gl.bindAttribLocation(program,index,name);
};
clay_opengl_web_GL.bindBuffer = function(target,buffer) {
	clay_opengl_web_GL.gl.bindBuffer(target,buffer);
};
clay_opengl_web_GL.bindFramebuffer = function(target,framebuffer) {
	clay_opengl_web_GL.gl.bindFramebuffer(target,framebuffer);
};
clay_opengl_web_GL.bindRenderbuffer = function(target,renderbuffer) {
	clay_opengl_web_GL.gl.bindRenderbuffer(target,renderbuffer);
};
clay_opengl_web_GL.bindTexture = function(target,texture) {
	clay_opengl_web_GL.gl.bindTexture(target,texture);
};
clay_opengl_web_GL.blendColor = function(red,green,blue,alpha) {
	clay_opengl_web_GL.gl.blendColor(red,green,blue,alpha);
};
clay_opengl_web_GL.blendEquation = function(mode) {
	clay_opengl_web_GL.gl.blendEquation(mode);
};
clay_opengl_web_GL.blendEquationSeparate = function(modeRGB,modeAlpha) {
	clay_opengl_web_GL.gl.blendEquationSeparate(modeRGB,modeAlpha);
};
clay_opengl_web_GL.blendFunc = function(sfactor,dfactor) {
	clay_opengl_web_GL.gl.blendFunc(sfactor,dfactor);
};
clay_opengl_web_GL.blendFuncSeparate = function(srcRGB,dstRGB,srcAlpha,dstAlpha) {
	clay_opengl_web_GL.gl.blendFuncSeparate(srcRGB,dstRGB,srcAlpha,dstAlpha);
};
clay_opengl_web_GL.bufferData = function(target,data,usage) {
	clay_opengl_web_GL.gl.bufferData(target,data,usage);
};
clay_opengl_web_GL.bufferSubData = function(target,offset,data) {
	clay_opengl_web_GL.gl.bufferSubData(target,offset,data);
};
clay_opengl_web_GL.checkFramebufferStatus = function(target) {
	return clay_opengl_web_GL.gl.checkFramebufferStatus(target);
};
clay_opengl_web_GL.clear = function(mask) {
	clay_opengl_web_GL.gl.clear(mask);
};
clay_opengl_web_GL.clearColor = function(red,green,blue,alpha) {
	clay_opengl_web_GL.gl.clearColor(red,green,blue,alpha);
};
clay_opengl_web_GL.clearDepth = function(depth) {
	clay_opengl_web_GL.gl.clearDepth(depth);
};
clay_opengl_web_GL.clearStencil = function(s) {
	clay_opengl_web_GL.gl.clearStencil(s);
};
clay_opengl_web_GL.colorMask = function(red,green,blue,alpha) {
	clay_opengl_web_GL.gl.colorMask(red,green,blue,alpha);
};
clay_opengl_web_GL.compileShader = function(shader) {
	clay_opengl_web_GL.gl.compileShader(shader);
};
clay_opengl_web_GL.compressedTexImage2D = function(target,level,internalformat,width,height,border,data) {
	clay_opengl_web_GL.gl.compressedTexImage2D(target,level,internalformat,width,height,border,data);
};
clay_opengl_web_GL.compressedTexSubImage2D = function(target,level,xoffset,yoffset,width,height,format,data) {
	clay_opengl_web_GL.gl.compressedTexSubImage2D(target,level,xoffset,yoffset,width,height,format,data);
};
clay_opengl_web_GL.copyTexImage2D = function(target,level,internalformat,x,y,width,height,border) {
	clay_opengl_web_GL.gl.copyTexImage2D(target,level,internalformat,x,y,width,height,border);
};
clay_opengl_web_GL.copyTexSubImage2D = function(target,level,xoffset,yoffset,x,y,width,height) {
	clay_opengl_web_GL.gl.copyTexSubImage2D(target,level,xoffset,yoffset,x,y,width,height);
};
clay_opengl_web_GL.createBuffer = function() {
	return clay_opengl_web_GL.gl.createBuffer();
};
clay_opengl_web_GL.createFramebuffer = function() {
	return clay_opengl_web_GL.gl.createFramebuffer();
};
clay_opengl_web_GL.createProgram = function() {
	return clay_opengl_web_GL.gl.createProgram();
};
clay_opengl_web_GL.createRenderbuffer = function() {
	return clay_opengl_web_GL.gl.createRenderbuffer();
};
clay_opengl_web_GL.createShader = function(type) {
	return clay_opengl_web_GL.gl.createShader(type);
};
clay_opengl_web_GL.createTexture = function() {
	return clay_opengl_web_GL.gl.createTexture();
};
clay_opengl_web_GL.cullFace = function(mode) {
	clay_opengl_web_GL.gl.cullFace(mode);
};
clay_opengl_web_GL.deleteBuffer = function(buffer) {
	clay_opengl_web_GL.gl.deleteBuffer(buffer);
};
clay_opengl_web_GL.deleteFramebuffer = function(framebuffer) {
	clay_opengl_web_GL.gl.deleteFramebuffer(framebuffer);
};
clay_opengl_web_GL.deleteProgram = function(program) {
	clay_opengl_web_GL.gl.deleteProgram(program);
};
clay_opengl_web_GL.deleteRenderbuffer = function(renderbuffer) {
	clay_opengl_web_GL.gl.deleteRenderbuffer(renderbuffer);
};
clay_opengl_web_GL.deleteShader = function(shader) {
	clay_opengl_web_GL.gl.deleteShader(shader);
};
clay_opengl_web_GL.deleteTexture = function(texture) {
	clay_opengl_web_GL.gl.deleteTexture(texture);
};
clay_opengl_web_GL.depthFunc = function(func) {
	clay_opengl_web_GL.gl.depthFunc(func);
};
clay_opengl_web_GL.depthMask = function(flag) {
	clay_opengl_web_GL.gl.depthMask(flag);
};
clay_opengl_web_GL.depthRange = function(zNear,zFar) {
	clay_opengl_web_GL.gl.depthRange(zNear,zFar);
};
clay_opengl_web_GL.detachShader = function(program,shader) {
	clay_opengl_web_GL.gl.detachShader(program,shader);
};
clay_opengl_web_GL.disable = function(cap) {
	clay_opengl_web_GL.gl.disable(cap);
};
clay_opengl_web_GL.disableVertexAttribArray = function(index) {
	clay_opengl_web_GL.gl.disableVertexAttribArray(index);
};
clay_opengl_web_GL.drawArrays = function(mode,first,count) {
	clay_opengl_web_GL.gl.drawArrays(mode,first,count);
};
clay_opengl_web_GL.drawElements = function(mode,count,type,offset) {
	clay_opengl_web_GL.gl.drawElements(mode,count,type,offset);
};
clay_opengl_web_GL.enable = function(cap) {
	clay_opengl_web_GL.gl.enable(cap);
};
clay_opengl_web_GL.enableVertexAttribArray = function(index) {
	clay_opengl_web_GL.gl.enableVertexAttribArray(index);
};
clay_opengl_web_GL.finish = function() {
	clay_opengl_web_GL.gl.finish();
};
clay_opengl_web_GL.flush = function() {
	clay_opengl_web_GL.gl.flush();
};
clay_opengl_web_GL.framebufferRenderbuffer = function(target,attachment,renderbuffertarget,renderbuffer) {
	clay_opengl_web_GL.gl.framebufferRenderbuffer(target,attachment,renderbuffertarget,renderbuffer);
};
clay_opengl_web_GL.framebufferTexture2D = function(target,attachment,textarget,texture,level) {
	clay_opengl_web_GL.gl.framebufferTexture2D(target,attachment,textarget,texture,level);
};
clay_opengl_web_GL.frontFace = function(mode) {
	clay_opengl_web_GL.gl.frontFace(mode);
};
clay_opengl_web_GL.generateMipmap = function(target) {
	clay_opengl_web_GL.gl.generateMipmap(target);
};
clay_opengl_web_GL.getActiveAttrib = function(program,index) {
	return clay_opengl_web_GL.gl.getActiveAttrib(program,index);
};
clay_opengl_web_GL.getActiveUniform = function(program,index) {
	return clay_opengl_web_GL.gl.getActiveUniform(program,index);
};
clay_opengl_web_GL.getAttachedShaders = function(program) {
	return clay_opengl_web_GL.gl.getAttachedShaders(program);
};
clay_opengl_web_GL.getAttribLocation = function(program,name) {
	return clay_opengl_web_GL.gl.getAttribLocation(program,name);
};
clay_opengl_web_GL.getBufferParameter = function(target,pname) {
	return clay_opengl_web_GL.gl.getBufferParameter(target,pname);
};
clay_opengl_web_GL.getContextAttributes = function() {
	return clay_opengl_web_GL.gl.getContextAttributes();
};
clay_opengl_web_GL.getError = function() {
	return clay_opengl_web_GL.gl.getError();
};
clay_opengl_web_GL.getExtension = function(name) {
	return clay_opengl_web_GL.gl.getExtension(name);
};
clay_opengl_web_GL.getFramebufferAttachmentParameter = function(target,attachment,pname) {
	return clay_opengl_web_GL.gl.getFramebufferAttachmentParameter(target,attachment,pname);
};
clay_opengl_web_GL.getParameter = function(pname) {
	return clay_opengl_web_GL.gl.getParameter(pname);
};
clay_opengl_web_GL.getProgramInfoLog = function(program) {
	return clay_opengl_web_GL.gl.getProgramInfoLog(program);
};
clay_opengl_web_GL.getProgramParameter = function(program,pname) {
	return clay_opengl_web_GL.gl.getProgramParameter(program,pname);
};
clay_opengl_web_GL.getRenderbufferParameter = function(target,pname) {
	return clay_opengl_web_GL.gl.getRenderbufferParameter(target,pname);
};
clay_opengl_web_GL.getShaderInfoLog = function(shader) {
	return clay_opengl_web_GL.gl.getShaderInfoLog(shader);
};
clay_opengl_web_GL.getShaderParameter = function(shader,pname) {
	return clay_opengl_web_GL.gl.getShaderParameter(shader,pname);
};
clay_opengl_web_GL.getShaderPrecisionFormat = function(shadertype,precisiontype) {
	return clay_opengl_web_GL.gl.getShaderPrecisionFormat(shadertype,precisiontype);
};
clay_opengl_web_GL.getShaderSource = function(shader) {
	return clay_opengl_web_GL.gl.getShaderSource(shader);
};
clay_opengl_web_GL.getSupportedExtensions = function() {
	return clay_opengl_web_GL.gl.getSupportedExtensions();
};
clay_opengl_web_GL.getTexParameter = function(target,pname) {
	return clay_opengl_web_GL.gl.getTexParameter(target,pname);
};
clay_opengl_web_GL.getUniform = function(program,location) {
	return clay_opengl_web_GL.gl.getUniform(program,location);
};
clay_opengl_web_GL.getUniformLocation = function(program,name) {
	return clay_opengl_web_GL.gl.getUniformLocation(program,name);
};
clay_opengl_web_GL.getVertexAttrib = function(index,pname) {
	return clay_opengl_web_GL.gl.getVertexAttrib(index,pname);
};
clay_opengl_web_GL.getVertexAttribOffset = function(index,pname) {
	return clay_opengl_web_GL.gl.getVertexAttribOffset(index,pname);
};
clay_opengl_web_GL.hint = function(target,mode) {
	clay_opengl_web_GL.gl.hint(target,mode);
};
clay_opengl_web_GL.isBuffer = function(buffer) {
	return clay_opengl_web_GL.gl.isBuffer(buffer);
};
clay_opengl_web_GL.isEnabled = function(cap) {
	return clay_opengl_web_GL.gl.isEnabled(cap);
};
clay_opengl_web_GL.isFramebuffer = function(framebuffer) {
	return clay_opengl_web_GL.gl.isFramebuffer(framebuffer);
};
clay_opengl_web_GL.isProgram = function(program) {
	return clay_opengl_web_GL.gl.isProgram(program);
};
clay_opengl_web_GL.isRenderbuffer = function(renderbuffer) {
	return clay_opengl_web_GL.gl.isRenderbuffer(renderbuffer);
};
clay_opengl_web_GL.isShader = function(shader) {
	return clay_opengl_web_GL.gl.isShader(shader);
};
clay_opengl_web_GL.isTexture = function(texture) {
	return clay_opengl_web_GL.gl.isTexture(texture);
};
clay_opengl_web_GL.lineWidth = function(width) {
	clay_opengl_web_GL.gl.lineWidth(width);
};
clay_opengl_web_GL.linkProgram = function(program) {
	clay_opengl_web_GL.gl.linkProgram(program);
};
clay_opengl_web_GL.pixelStorei = function(pname,param) {
	clay_opengl_web_GL.gl.pixelStorei(pname,param);
};
clay_opengl_web_GL.polygonOffset = function(factor,units) {
	clay_opengl_web_GL.gl.polygonOffset(factor,units);
};
clay_opengl_web_GL.readPixels = function(x,y,width,height,format,type,data) {
	clay_opengl_web_GL.gl.readPixels(x,y,width,height,format,type,data);
};
clay_opengl_web_GL.renderbufferStorage = function(target,internalformat,width,height) {
	clay_opengl_web_GL.gl.renderbufferStorage(target,internalformat,width,height);
};
clay_opengl_web_GL.sampleCoverage = function(value,invert) {
	clay_opengl_web_GL.gl.sampleCoverage(value,invert);
};
clay_opengl_web_GL.scissor = function(x,y,width,height) {
	clay_opengl_web_GL.gl.scissor(x,y,width,height);
};
clay_opengl_web_GL.shaderSource = function(shader,source) {
	clay_opengl_web_GL.gl.shaderSource(shader,source);
};
clay_opengl_web_GL.stencilFunc = function(func,ref,mask) {
	clay_opengl_web_GL.gl.stencilFunc(func,ref,mask);
};
clay_opengl_web_GL.stencilFuncSeparate = function(face,func,ref,mask) {
	clay_opengl_web_GL.gl.stencilFuncSeparate(face,func,ref,mask);
};
clay_opengl_web_GL.stencilMask = function(mask) {
	clay_opengl_web_GL.gl.stencilMask(mask);
};
clay_opengl_web_GL.stencilMaskSeparate = function(face,mask) {
	clay_opengl_web_GL.gl.stencilMaskSeparate(face,mask);
};
clay_opengl_web_GL.stencilOp = function(fail,zfail,zpass) {
	clay_opengl_web_GL.gl.stencilOp(fail,zfail,zpass);
};
clay_opengl_web_GL.stencilOpSeparate = function(face,fail,zfail,zpass) {
	clay_opengl_web_GL.gl.stencilOpSeparate(face,fail,zfail,zpass);
};
clay_opengl_web_GL.texImage2D = function(target,level,internalformat,width,height,border,format,type,data) {
	clay_opengl_web_GL.gl.texImage2D(target,level,internalformat,width,height,border,format,type,data);
};
clay_opengl_web_GL.texParameterf = function(target,pname,param) {
	clay_opengl_web_GL.gl.texParameterf(target,pname,param);
};
clay_opengl_web_GL.texParameteri = function(target,pname,param) {
	clay_opengl_web_GL.gl.texParameteri(target,pname,param);
};
clay_opengl_web_GL.texSubImage2D = function(target,level,xoffset,yoffset,width,height,format,type,data) {
	clay_opengl_web_GL.gl.texSubImage2D(target,level,xoffset,yoffset,width,height,format,type,data);
};
clay_opengl_web_GL.uniform1f = function(location,x) {
	clay_opengl_web_GL.gl.uniform1f(location,x);
};
clay_opengl_web_GL.uniform1fv = function(location,data) {
	clay_opengl_web_GL.gl.uniform1fv(location,data);
};
clay_opengl_web_GL.uniform1i = function(location,x) {
	clay_opengl_web_GL.gl.uniform1i(location,x);
};
clay_opengl_web_GL.uniform1iv = function(location,data) {
	clay_opengl_web_GL.gl.uniform1iv(location,data);
};
clay_opengl_web_GL.uniform2f = function(location,x,y) {
	clay_opengl_web_GL.gl.uniform2f(location,x,y);
};
clay_opengl_web_GL.uniform2fv = function(location,data) {
	clay_opengl_web_GL.gl.uniform2fv(location,data);
};
clay_opengl_web_GL.uniform2i = function(location,x,y) {
	clay_opengl_web_GL.gl.uniform2i(location,x,y);
};
clay_opengl_web_GL.uniform2iv = function(location,data) {
	clay_opengl_web_GL.gl.uniform2iv(location,data);
};
clay_opengl_web_GL.uniform3f = function(location,x,y,z) {
	clay_opengl_web_GL.gl.uniform3f(location,x,y,z);
};
clay_opengl_web_GL.uniform3fv = function(location,data) {
	clay_opengl_web_GL.gl.uniform3fv(location,data);
};
clay_opengl_web_GL.uniform3i = function(location,x,y,z) {
	clay_opengl_web_GL.gl.uniform3i(location,x,y,z);
};
clay_opengl_web_GL.uniform3iv = function(location,data) {
	clay_opengl_web_GL.gl.uniform3iv(location,data);
};
clay_opengl_web_GL.uniform4f = function(location,x,y,z,w) {
	clay_opengl_web_GL.gl.uniform4f(location,x,y,z,w);
};
clay_opengl_web_GL.uniform4fv = function(location,data) {
	clay_opengl_web_GL.gl.uniform4fv(location,data);
};
clay_opengl_web_GL.uniform4i = function(location,x,y,z,w) {
	clay_opengl_web_GL.gl.uniform4i(location,x,y,z,w);
};
clay_opengl_web_GL.uniform4iv = function(location,data) {
	clay_opengl_web_GL.gl.uniform4iv(location,data);
};
clay_opengl_web_GL.uniformMatrix2fv = function(location,transpose,data) {
	clay_opengl_web_GL.gl.uniformMatrix2fv(location,transpose,data);
};
clay_opengl_web_GL.uniformMatrix3fv = function(location,transpose,data) {
	clay_opengl_web_GL.gl.uniformMatrix3fv(location,transpose,data);
};
clay_opengl_web_GL.uniformMatrix4fv = function(location,transpose,data) {
	clay_opengl_web_GL.gl.uniformMatrix4fv(location,transpose,data);
};
clay_opengl_web_GL.useProgram = function(program) {
	clay_opengl_web_GL.gl.useProgram(program);
};
clay_opengl_web_GL.validateProgram = function(program) {
	clay_opengl_web_GL.gl.validateProgram(program);
};
clay_opengl_web_GL.vertexAttrib1f = function(indx,x) {
	clay_opengl_web_GL.gl.vertexAttrib1f(indx,x);
};
clay_opengl_web_GL.vertexAttrib1fv = function(indx,data) {
	clay_opengl_web_GL.gl.vertexAttrib1fv(indx,data);
};
clay_opengl_web_GL.vertexAttrib2f = function(indx,x,y) {
	clay_opengl_web_GL.gl.vertexAttrib2f(indx,x,y);
};
clay_opengl_web_GL.vertexAttrib2fv = function(indx,data) {
	clay_opengl_web_GL.gl.vertexAttrib2fv(indx,data);
};
clay_opengl_web_GL.vertexAttrib3f = function(indx,x,y,z) {
	clay_opengl_web_GL.gl.vertexAttrib3f(indx,x,y,z);
};
clay_opengl_web_GL.vertexAttrib3fv = function(indx,data) {
	clay_opengl_web_GL.gl.vertexAttrib3fv(indx,data);
};
clay_opengl_web_GL.vertexAttrib4f = function(indx,x,y,z,w) {
	clay_opengl_web_GL.gl.vertexAttrib4f(indx,x,y,z,w);
};
clay_opengl_web_GL.vertexAttrib4fv = function(indx,data) {
	clay_opengl_web_GL.gl.vertexAttrib4fv(indx,data);
};
clay_opengl_web_GL.vertexAttribPointer = function(indx,size,type,normalized,stride,offset) {
	clay_opengl_web_GL.gl.vertexAttribPointer(indx,size,type,normalized,stride,offset);
};
clay_opengl_web_GL.viewport = function(x,y,width,height) {
	clay_opengl_web_GL.gl.viewport(x,y,width,height);
};
clay_opengl_web_GL.get_version = function() {
	return 7938;
};
var clay_web_WebAssets = function(app) {
	clay_base_BaseAssets.call(this,app);
};
clay_web_WebAssets.__name__ = true;
clay_web_WebAssets.__super__ = clay_base_BaseAssets;
clay_web_WebAssets.prototype = $extend(clay_base_BaseAssets.prototype,{
	isSynchronous: function() {
		return false;
	}
	,loadImage: function(path,components,callback) {
		if(components == null) {
			components = 4;
		}
		var _gthis = this;
		if(path == null) {
			throw haxe_Exception.thrown("Image path is null!");
		}
		var ext = haxe_io_Path.extension(path);
		this.app.io.loadData(path,clay_web_WebAssets._binaryTrue,function(bytes) {
			if(bytes == null) {
				if(callback != null) {
					clay_Immediate.push(function() {
						callback(null);
					});
				}
				return;
			}
			_gthis.imageFromBytes(bytes,ext,4,function(image) {
				if(callback != null) {
					clay_Immediate.push(function() {
						callback(image);
					});
				}
			});
		});
		return null;
	}
	,decodeImageFromElement: function(elem) {
		var widthPot = this.nearestPowerOfTwo(elem.width);
		var heightPot = this.nearestPowerOfTwo(elem.height);
		var imageBytes = this.potBytesFromElement(elem.width,elem.height,widthPot,heightPot,elem);
		var image = new clay_Image(elem.width,elem.height,widthPot,heightPot,4,4,imageBytes);
		imageBytes = null;
		return image;
	}
	,imageFromBytes: function(bytes,ext,components,callback) {
		if(components == null) {
			components = 4;
		}
		var _gthis = this;
		if(bytes == null) {
			throw haxe_Exception.thrown("Image bytes are null!");
		}
		var str = "";
		var i = 0;
		var len = bytes.length;
		while(i < len) {
			var code = bytes[i++] & 255;
			str += String.fromCodePoint(code);
		}
		var b64 = window.btoa(str);
		var src = "data:image/" + ext + ";base64," + b64;
		var img = new Image();
		img.onload = function(_) {
			var image = _gthis.decodeImageFromElement(img);
			if(callback != null) {
				clay_Immediate.push(function() {
					callback(image);
				});
			}
		};
		img.onerror = function(e) {
			clay_Log.error("failed to load image from bytes, on error: " + e,{ fileName : "src/clay/web/WebAssets.hx", lineNumber : 200, className : "clay.web.WebAssets", methodName : "imageFromBytes"});
		};
		img.src = src;
		return null;
	}
	,nearestPowerOfTwo: function(value) {
		if(!clay_web_WebAssets.POT) {
			return value;
		}
		--value;
		value |= value >> 1;
		value |= value >> 2;
		value |= value >> 4;
		value |= value >> 8;
		value |= value >> 16;
		return ++value;
	}
	,potBytesFromPixels: function(width,height,widthPot,heightPot,source) {
		var tmpCanvas = window.document.createElement("canvas");
		tmpCanvas.width = widthPot;
		tmpCanvas.height = heightPot;
		var tmpContext = tmpCanvas.getContext("2d",null);
		tmpContext.clearRect(0,0,tmpCanvas.width,tmpCanvas.height);
		var imageBytes = null;
		var pixels = new Uint8ClampedArray(source.buffer);
		var imgdata = tmpContext.createImageData(width,height);
		imgdata.data.set(pixels);
		try {
			tmpContext.putImageData(imgdata,0,0);
			imageBytes = tmpContext.getImageData(0,0,tmpCanvas.width,tmpCanvas.height);
		} catch( _g ) {
			var e = haxe_Exception.caught(_g).unwrap();
			throw haxe_Exception.thrown(e);
		}
		tmpCanvas = null;
		tmpContext = null;
		imgdata = null;
		return new Uint8Array(imageBytes.data);
	}
	,potBytesFromElement: function(width,height,widthPot,heightPot,source) {
		var tmpCanvas = window.document.createElement("canvas");
		tmpCanvas.width = widthPot;
		tmpCanvas.height = heightPot;
		var tmpContext = tmpCanvas.getContext("2d",null);
		tmpContext.clearRect(0,0,tmpCanvas.width,tmpCanvas.height);
		tmpContext.drawImage(source,0,0,width,height);
		var imageBytes = null;
		try {
			imageBytes = tmpContext.getImageData(0,0,tmpCanvas.width,tmpCanvas.height);
		} catch( _g ) {
			var e = haxe_Exception.caught(_g).unwrap();
			var tips = "- textures served from file:/// throw security errors\n";
			tips += "- textures served over http:// work for cross origin byte requests";
			clay_Log.info(tips,{ fileName : "src/clay/web/WebAssets.hx", lineNumber : 311, className : "clay.web.WebAssets", methodName : "potBytesFromElement"});
			throw haxe_Exception.thrown(e);
		}
		tmpCanvas = null;
		tmpContext = null;
		return new Uint8Array(imageBytes.data);
	}
});
var clay_web_WebConfig = function(windowId,windowParent,preventDefaultContextMenu,preventDefaultMouseWheel,preventDefaultTouches,preventDefaultKeys,mouseUseBrowserWindowEvents) {
	this.mouseUseBrowserWindowEvents = true;
	this.preventDefaultKeys = [1073741904,1073741903,1073741906,1073741905,8,9,127,32];
	this.preventDefaultTouches = true;
	this.preventDefaultMouseWheel = true;
	this.preventDefaultContextMenu = true;
	this.windowParent = window.document.body;
	this.windowId = "app";
	if(windowId != null) {
		this.windowId = windowId;
	}
	if(windowParent != null) {
		this.windowParent = windowParent;
	}
	if(preventDefaultContextMenu != null) {
		this.preventDefaultContextMenu = preventDefaultContextMenu;
	}
	if(preventDefaultMouseWheel != null) {
		this.preventDefaultMouseWheel = preventDefaultMouseWheel;
	}
	if(preventDefaultTouches != null) {
		this.preventDefaultTouches = preventDefaultTouches;
	}
	if(preventDefaultKeys != null) {
		this.preventDefaultKeys = preventDefaultKeys;
	}
	if(mouseUseBrowserWindowEvents != null) {
		this.mouseUseBrowserWindowEvents = mouseUseBrowserWindowEvents;
	}
};
clay_web_WebConfig.__name__ = true;
var clay_web_WebIO = function(app) {
	clay_base_BaseIO.call(this,app);
};
clay_web_WebIO.__name__ = true;
clay_web_WebIO.__super__ = clay_base_BaseIO;
clay_web_WebIO.prototype = $extend(clay_base_BaseIO.prototype,{
	isSynchronous: function() {
		return false;
	}
	,loadData: function(path,options,callback) {
		if(path == null) {
			throw haxe_Exception.thrown("Path is null!");
		}
		var binary = options != null && options.binary;
		var async = true;
		var request = new XMLHttpRequest();
		request.open("GET",path,async);
		if(binary) {
			request.overrideMimeType("text/plain; charset=x-user-defined");
		} else {
			request.overrideMimeType("text/plain; charset=UTF-8");
		}
		if(async) {
			request.responseType = "arraybuffer";
		}
		request.onload = function(data) {
			if(request.status == 200) {
				var this1 = new Uint8Array(request.response);
				var data1 = this1;
				if(callback != null) {
					clay_Immediate.push(function() {
						callback(data1);
					});
				}
			} else {
				clay_Log.error("Request status was " + request.status + " / " + request.statusText,{ fileName : "src/clay/web/WebIO.hx", lineNumber : 102, className : "clay.web.WebIO", methodName : "loadData"});
				if(callback != null) {
					clay_Immediate.push(function() {
						callback(data);
					});
				}
			}
		};
		request.send();
		return null;
	}
});
var clay_web_WebRuntime = function(app) {
	this.touches = new haxe_ds_IntMap();
	this.windowDpr = 1.0;
	this.windowY = 0;
	this.windowX = 0;
	this.gamepadsSupported = false;
	clay_base_BaseRuntime.call(this,app);
};
clay_web_WebRuntime.__name__ = true;
clay_web_WebRuntime.timestamp = function() {
	return window.performance.now() / 1000.0 - clay_web_WebRuntime.timestampStart;
};
clay_web_WebRuntime.defaultConfig = function() {
	return new clay_web_WebConfig("app",window.document.body,true,true,true,[1073741904,1073741903,1073741906,1073741905,8,9,127,32],true);
};
clay_web_WebRuntime.__super__ = clay_base_BaseRuntime;
clay_web_WebRuntime.prototype = $extend(clay_base_BaseRuntime.prototype,{
	init: function() {
		clay_web_WebRuntime.timestampStart = window.performance.now() / 1000.0;
		this.name = "web";
		this.initGamepads();
	}
	,ready: function() {
		this.createWindow();
		clay_Log.debug("Web / ready",{ fileName : "src/clay/web/WebRuntime.hx", lineNumber : 64, className : "clay.web.WebRuntime", methodName : "ready"});
	}
	,run: function() {
		clay_Log.debug("Web / run",{ fileName : "src/clay/web/WebRuntime.hx", lineNumber : 70, className : "clay.web.WebRuntime", methodName : "run"});
		this.loop(0);
		return false;
	}
	,loop: function(t) {
		if(t == null) {
			t = 0.016;
		}
		if(this.app.hasShutdown) {
			return false;
		}
		if(this.app.ready) {
			if(this.gamepadsSupported) {
				this.pollGamepads();
			}
			this.updateWindowBounds();
		}
		this.app.emitTick();
		if(!this.app.shuttingDown) {
			window.requestAnimationFrame($bind(this,this.loop));
		}
		return true;
	}
	,createWindow: function() {
		var config = this.app.config.window;
		this.window = window.document.createElement("canvas");
		this.windowDpr = this.windowDevicePixelRatio();
		this.window.width = Math.floor(config.width * this.windowDpr);
		this.window.height = Math.floor(config.height * this.windowDpr);
		this.windowW = config.width;
		this.windowH = config.height;
		this.window.style.width = config.width + "px";
		this.window.style.height = config.height + "px";
		this.window.style.background = "#000000";
		clay_Log.debug("Web / Created window at " + this.windowX + "," + this.windowY + " - " + this.window.width + "x" + this.window.height + " pixels (" + config.width + "x" + config.height + "@" + this.windowDpr + "x)",{ fileName : "src/clay/web/WebRuntime.hx", lineNumber : 126, className : "clay.web.WebRuntime", methodName : "createWindow"});
		this.window.id = this.app.config.runtime.windowId;
		this.app.config.runtime.windowParent.appendChild(this.window);
		if(config.title != null) {
			window.document.title = config.title;
		}
		if(!this.createRenderContext(this.window)) {
			this.createRenderContextFailed();
			return;
		}
		this.postRenderContext(this.window);
		this.setupEvents();
	}
	,createRenderContext: function($window) {
		var config = this.app.config.render;
		var attr = this.applyGLAttributes(config);
		var gl = null;
		if(config.webgl.version != 1) {
			gl = $window.getContext("webgl" + config.webgl.version);
			if(gl == null) {
				gl = $window.getContext("experimental-webgl" + config.webgl.version);
			}
		}
		gl = js_html__$CanvasElement_CanvasUtil.getContextWebGL($window,attr);
		clay_opengl_web_GL.gl = gl;
		clay_Log.debug("GL / context: " + Std.string(gl != null),{ fileName : "src/clay/web/WebRuntime.hx", lineNumber : 166, className : "clay.web.WebRuntime", methodName : "createRenderContext"});
		return gl != null;
	}
	,createRenderContextFailed: function() {
		var msg = "WebGL is required to run this!<br/><br/>";
		msg += "visit <a style=\"color:#06b4fb; text-decoration:none;\" href=\"http://get.webgl.org/\">get.webgl.com</a> for info<br/>";
		msg += "and contact the developer of this app";
		var textEl = window.document.createElement("div");
		var overlayEl = window.document.createElement("div");
		textEl.style.marginLeft = "auto";
		textEl.style.marginRight = "auto";
		textEl.style.color = "#d3d3d3";
		textEl.style.marginTop = "5em";
		textEl.style.fontSize = "1.4em";
		textEl.style.fontFamily = "Helvetica, sans-serif";
		textEl.innerHTML = msg;
		overlayEl.style.top = "0";
		overlayEl.style.left = "0";
		overlayEl.style.width = "100%";
		overlayEl.style.height = "100%";
		overlayEl.style.display = "block";
		overlayEl.style.minWidth = "100%";
		overlayEl.style.minHeight = "100%";
		overlayEl.style.textAlign = "center";
		overlayEl.style.position = "absolute";
		overlayEl.style.background = "rgba(1,1,1,0.90)";
		overlayEl.appendChild(textEl);
		window.document.body.appendChild(overlayEl);
		throw haxe_Exception.thrown("Web / Failed to create render context");
	}
	,applyGLAttributes: function(config) {
		var attr = { alpha : config.webgl.alpha, antialias : config.webgl.antialias, depth : config.webgl.depth, stencil : config.webgl.stencil, failIfMajorPerformanceCaveat : config.webgl.failIfMajorPerformanceCaveat, premultipliedAlpha : config.webgl.premultipliedAlpha, preserveDrawingBuffer : config.webgl.preserveDrawingBuffer};
		if(config.antialiasing > 0) {
			attr.antialias = true;
		}
		if(config.depth > 0) {
			attr.depth = true;
		}
		if(config.stencil > 0) {
			attr.stencil = true;
		}
		return attr;
	}
	,postRenderContext: function($window) {
		var color = this.app.config.render.defaultClear;
		clay_opengl_web_GL.gl.clearDepth(1.0);
		clay_opengl_web_GL.gl.clearStencil(0);
		clay_opengl_web_GL.gl.clearColor(color.r,color.g,color.b,color.a);
		clay_opengl_web_GL.gl.clear(17664);
	}
	,setupEvents: function() {
		this.window.addEventListener("mouseenter",$bind(this,this.handleMouseEnter));
		this.window.addEventListener("mouseleave",$bind(this,this.handleMouseLeave));
		window.document.addEventListener("visibilitychange",$bind(this,this.handleVisibilityChange));
		window.document.addEventListener("keydown",$bind(this,this.handleKeyDown));
		window.document.addEventListener("keyup",$bind(this,this.handleKeyUp));
		window.document.addEventListener("keypress",$bind(this,this.handleKeyPress));
		this.window.addEventListener("contextmenu",$bind(this,this.handleContextMenu));
		var eventsWindow = this.app.config.runtime.mouseUseBrowserWindowEvents ? window : this.window;
		eventsWindow.addEventListener("mousedown",$bind(this,this.handleMouseDown));
		eventsWindow.addEventListener("mouseup",$bind(this,this.handleMouseUp));
		eventsWindow.addEventListener("mousemove",$bind(this,this.handleMouseMove));
		this.window.addEventListener("wheel",$bind(this,this.handleWheel));
		this.window.addEventListener("touchstart",$bind(this,this.handleTouchStart));
		this.window.addEventListener("touchend",$bind(this,this.handleTouchEnd));
		this.window.addEventListener("touchmove",$bind(this,this.handleTouchMove));
		window.addEventListener("gamepadconnected",$bind(this,this.handleGamepadConnected));
		window.addEventListener("gamepaddisconnected",$bind(this,this.handleGamepadDisconnected));
	}
	,handleVisibilityChange: function(_) {
		if(window.document.hidden) {
			this.app.emitWindowEvent(2,window.performance.now() / 1000.0 - clay_web_WebRuntime.timestampStart,1,0,0);
			this.app.emitWindowEvent(7,window.performance.now() / 1000.0 - clay_web_WebRuntime.timestampStart,1,0,0);
			this.app.emitWindowEvent(13,window.performance.now() / 1000.0 - clay_web_WebRuntime.timestampStart,1,0,0);
		} else {
			this.app.emitWindowEvent(1,window.performance.now() / 1000.0 - clay_web_WebRuntime.timestampStart,1,0,0);
			this.app.emitWindowEvent(9,window.performance.now() / 1000.0 - clay_web_WebRuntime.timestampStart,1,0,0);
			this.app.emitWindowEvent(12,window.performance.now() / 1000.0 - clay_web_WebRuntime.timestampStart,1,0,0);
		}
	}
	,handleContextMenu: function(ev) {
		if(this.app.config.runtime.preventDefaultContextMenu) {
			ev.preventDefault();
		}
	}
	,handleMouseEnter: function(ev) {
		this.app.events.mouseEnter(ev);
	}
	,handleMouseLeave: function(ev) {
		this.app.events.mouseLeave(ev);
	}
	,handleMouseDown: function(ev) {
		var _this = this.app.input;
		var x = Math.floor(this.windowDpr * (ev.pageX - this.windowX));
		var y = Math.floor(this.windowDpr * (ev.pageY - this.windowY));
		var button = ev.button + 1;
		var timestamp = window.performance.now() / 1000.0 - clay_web_WebRuntime.timestampStart;
		_this.app.events.mouseDown(x,y,button,timestamp,1);
	}
	,handleMouseUp: function(ev) {
		var _this = this.app.input;
		var x = Math.floor(this.windowDpr * (ev.pageX - this.windowX));
		var y = Math.floor(this.windowDpr * (ev.pageY - this.windowY));
		var button = ev.button + 1;
		var timestamp = window.performance.now() / 1000.0 - clay_web_WebRuntime.timestampStart;
		_this.app.events.mouseUp(x,y,button,timestamp,1);
	}
	,handleMouseMove: function(ev) {
		var movementX = ev.movementX == null ? 0 : ev.movementX;
		var movementY = ev.movementY == null ? 0 : ev.movementY;
		movementX = Math.floor(movementX * this.windowDpr);
		movementY = Math.floor(movementY * this.windowDpr);
		var _this = this.app.input;
		var x = Math.floor(this.windowDpr * (ev.pageX - this.windowX));
		var y = Math.floor(this.windowDpr * (ev.pageY - this.windowY));
		var timestamp = window.performance.now() / 1000.0 - clay_web_WebRuntime.timestampStart;
		_this.app.events.mouseMove(x,y,movementX,movementY,timestamp,1);
	}
	,handleWheel: function(ev) {
		if(this.app.config.runtime.preventDefaultMouseWheel) {
			ev.preventDefault();
		}
		var _this = this.app.input;
		var x = ev.deltaX;
		var y = ev.deltaY;
		var timestamp = window.performance.now() / 1000.0 - clay_web_WebRuntime.timestampStart;
		_this.app.events.mouseWheel(x,y,timestamp,1);
	}
	,handleTouchStart: function(ev) {
		if(this.app.config.runtime.preventDefaultTouches) {
			ev.preventDefault();
		}
		var bound = this.window.getBoundingClientRect();
		var _g = 0;
		var _g1 = ev.changedTouches;
		while(_g < _g1.length) {
			var touch = _g1[_g];
			++_g;
			var x = touch.clientX - bound.left;
			var y = touch.clientY - bound.top;
			x /= bound.width;
			y /= bound.height;
			var touchInfo = this.touches.h[touch.identifier];
			if(touchInfo == null) {
				touchInfo = { x : x, y : y};
				this.touches.h[touch.identifier] = touchInfo;
			} else {
				touchInfo.x = x;
				touchInfo.y = y;
			}
			var _this = this.app.input;
			var touchId = touch.identifier;
			var timestamp = window.performance.now() / 1000.0 - clay_web_WebRuntime.timestampStart;
			_this.app.events.touchDown(x,y,0,0,touchId,timestamp);
		}
	}
	,handleTouchEnd: function(ev) {
		if(this.app.config.runtime.preventDefaultTouches) {
			ev.preventDefault();
		}
		var bound = this.window.getBoundingClientRect();
		var _g = 0;
		var _g1 = ev.changedTouches;
		while(_g < _g1.length) {
			var touch = _g1[_g];
			++_g;
			var x = touch.clientX - bound.left;
			var y = touch.clientY - bound.top;
			x /= bound.width;
			y /= bound.height;
			var touchInfo = this.touches.h[touch.identifier];
			if(touchInfo == null) {
				touchInfo = { x : x, y : y};
				this.touches.h[touch.identifier] = touchInfo;
			}
			var _this = this.app.input;
			var dx = x - touchInfo.x;
			var dy = y - touchInfo.y;
			var touchId = touch.identifier;
			var timestamp = window.performance.now() / 1000.0 - clay_web_WebRuntime.timestampStart;
			_this.app.events.touchUp(x,y,dx,dy,touchId,timestamp);
			touchInfo.x = x;
			touchInfo.y = y;
		}
	}
	,handleTouchMove: function(ev) {
		if(this.app.config.runtime.preventDefaultTouches) {
			ev.preventDefault();
		}
		var bound = this.window.getBoundingClientRect();
		var _g = 0;
		var _g1 = ev.changedTouches;
		while(_g < _g1.length) {
			var touch = _g1[_g];
			++_g;
			var x = touch.clientX - bound.left;
			var y = touch.clientY - bound.top;
			x /= bound.width;
			y /= bound.height;
			var touchInfo = this.touches.h[touch.identifier];
			if(touchInfo == null) {
				touchInfo = { x : x, y : y};
				this.touches.h[touch.identifier] = touchInfo;
			}
			var _this = this.app.input;
			var dx = x - touchInfo.x;
			var dy = y - touchInfo.y;
			var touchId = touch.identifier;
			var timestamp = window.performance.now() / 1000.0 - clay_web_WebRuntime.timestampStart;
			_this.app.events.touchMove(x,y,dx,dy,touchId,timestamp);
			touchInfo.x = x;
			touchInfo.y = y;
		}
	}
	,handleKeyDown: function(ev) {
		var keyCode = this.convertKeyCode(ev.keyCode);
		var scanCode = clay_KeyCode.toScanCode(keyCode);
		var modState = this.modStateFromEvent(ev);
		if(this.app.config.runtime.preventDefaultKeys.indexOf(keyCode) != -1) {
			ev.preventDefault();
		}
		var _this = this.app.input;
		var repeat = ev.repeat;
		var timestamp = window.performance.now() / 1000.0 - clay_web_WebRuntime.timestampStart;
		_this.app.events.keyDown(keyCode,scanCode,repeat,modState,timestamp,1);
	}
	,handleKeyUp: function(ev) {
		var keyCode = this.convertKeyCode(ev.keyCode);
		var scanCode = clay_KeyCode.toScanCode(keyCode);
		var modState = this.modStateFromEvent(ev);
		if(this.app.config.runtime.preventDefaultKeys.indexOf(keyCode) != -1) {
			ev.preventDefault();
		}
		var _this = this.app.input;
		var repeat = ev.repeat;
		var timestamp = window.performance.now() / 1000.0 - clay_web_WebRuntime.timestampStart;
		_this.app.events.keyUp(keyCode,scanCode,repeat,modState,timestamp,1);
	}
	,handleKeyPress: function(ev) {
		if(ev.which != 0 && ev.keyCode != 8 && ev.keyCode != 13) {
			var code = ev.charCode;
			var text = String.fromCodePoint(code);
			var _this = this.app.input;
			var length = text.length;
			var timestamp = window.performance.now() / 1000.0 - clay_web_WebRuntime.timestampStart;
			_this.app.events.text(text,0,length,2,timestamp,1);
		}
	}
	,handleGamepadConnected: function(ev) {
		clay_Log.debug("Gamepad connected at index " + ev.gamepad.index + ": " + ev.gamepad.id + ". " + ev.gamepad.buttons.length + " buttons, " + ev.gamepad.axes.length + " axes",{ fileName : "src/clay/web/WebRuntime.hx", lineNumber : 558, className : "clay.web.WebRuntime", methodName : "handleGamepadConnected"});
		var gamepad = ev.gamepad;
		if(this.gamepadButtonCache[gamepad.index] == null) {
			this.gamepadButtonCache[gamepad.index] = [];
			var _g = 0;
			var _g1 = gamepad.buttons.length;
			while(_g < _g1) {
				var i = _g++;
				this.gamepadButtonCache[gamepad.index].push(0);
			}
			this.gamepadAxisCache[gamepad.index] = [];
			var _g = 0;
			var _g1 = gamepad.axes.length;
			while(_g < _g1) {
				var i = _g++;
				this.gamepadAxisCache[gamepad.index].push(0);
			}
		}
		var _this = this.app.input;
		var gamepad = ev.gamepad.index;
		var id = ev.gamepad.id;
		var timestamp = window.performance.now() / 1000.0 - clay_web_WebRuntime.timestampStart;
		_this.app.events.gamepadDevice(gamepad,id,1,timestamp);
	}
	,handleGamepadDisconnected: function(ev) {
		clay_Log.debug("Gamepad disconnected at index " + ev.gamepad.index + ": " + ev.gamepad.id,{ fileName : "src/clay/web/WebRuntime.hx", lineNumber : 573, className : "clay.web.WebRuntime", methodName : "handleGamepadDisconnected"});
		var gamepad = ev.gamepad;
		this.gamepadButtonCache[gamepad.index] = null;
		this.gamepadAxisCache[gamepad.index] = null;
		var _this = this.app.input;
		var gamepad = ev.gamepad.index;
		var id = ev.gamepad.id;
		var timestamp = window.performance.now() / 1000.0 - clay_web_WebRuntime.timestampStart;
		_this.app.events.gamepadDevice(gamepad,id,2,timestamp);
	}
	,convertKeyCode: function(domKeyCode) {
		if(domKeyCode >= 65 && domKeyCode <= 90) {
			return domKeyCode + 32;
		}
		return clay_web__$WebRuntime_DOMKeys.domKeyToKeyCode(domKeyCode);
	}
	,modStateFromEvent: function(keyEvent) {
		var none = !keyEvent.altKey && !keyEvent.ctrlKey && !keyEvent.metaKey && !keyEvent.shiftKey;
		this.app.input.modState.none = none;
		this.app.input.modState.lshift = keyEvent.shiftKey;
		this.app.input.modState.rshift = keyEvent.shiftKey;
		this.app.input.modState.lctrl = keyEvent.ctrlKey;
		this.app.input.modState.rctrl = keyEvent.ctrlKey;
		this.app.input.modState.lalt = keyEvent.altKey;
		this.app.input.modState.ralt = keyEvent.altKey;
		this.app.input.modState.lmeta = keyEvent.metaKey;
		this.app.input.modState.rmeta = keyEvent.metaKey;
		this.app.input.modState.num = false;
		this.app.input.modState.caps = false;
		this.app.input.modState.mode = false;
		this.app.input.modState.ctrl = keyEvent.ctrlKey;
		this.app.input.modState.shift = keyEvent.shiftKey;
		this.app.input.modState.alt = keyEvent.altKey;
		this.app.input.modState.meta = keyEvent.metaKey;
		return this.app.input.modState;
	}
	,getWindowX: function(bounds) {
		return Math.round(bounds.left + window.pageXOffset - window.document.body.clientTop);
	}
	,getWindowY: function(bounds) {
		return Math.round(bounds.top + window.pageYOffset - window.document.body.clientLeft);
	}
	,translateMouseX: function(ev) {
		return Math.floor(this.windowDpr * (ev.pageX - this.windowX));
	}
	,translateMouseY: function(ev) {
		return Math.floor(this.windowDpr * (ev.pageY - this.windowY));
	}
	,updateWindowBounds: function() {
		var dpr = this.windowDpr;
		this.windowDpr = this.windowDevicePixelRatio();
		var bounds = this.window.getBoundingClientRect();
		var x = Math.round(bounds.left + window.pageXOffset - window.document.body.clientTop);
		var y = Math.round(bounds.top + window.pageYOffset - window.document.body.clientLeft);
		var w = Math.round(bounds.width);
		var h = Math.round(bounds.height);
		if(x != this.windowX || y != this.windowY) {
			this.windowX = x;
			this.windowY = y;
			this.app.emitWindowEvent(4,window.performance.now() / 1000.0 - clay_web_WebRuntime.timestampStart,1,this.windowX,this.windowY);
		}
		if(w != this.windowW || h != this.windowH || dpr != this.windowDpr) {
			this.windowW = w;
			this.windowH = h;
			this.window.width = Math.floor(this.windowW * this.windowDpr);
			this.window.height = Math.floor(this.windowH * this.windowDpr);
			this.app.emitWindowEvent(6,window.performance.now() / 1000.0 - clay_web_WebRuntime.timestampStart,1,this.window.width,this.window.height);
		}
	}
	,initGamepads: function() {
		var list = this.getGamepadList();
		if(list != null) {
			this.gamepadsSupported = true;
			this.gamepadButtonCache = [];
			this.gamepadAxisCache = [];
			var _g = 0;
			while(_g < list.length) {
				var gamepad = list[_g];
				++_g;
				if(gamepad != null) {
					if(this.gamepadButtonCache[gamepad.index] == null) {
						this.gamepadButtonCache[gamepad.index] = [];
						var _g1 = 0;
						var _g2 = gamepad.buttons.length;
						while(_g1 < _g2) {
							var i = _g1++;
							this.gamepadButtonCache[gamepad.index].push(0);
						}
						this.gamepadAxisCache[gamepad.index] = [];
						var _g3 = 0;
						var _g4 = gamepad.axes.length;
						while(_g3 < _g4) {
							var i1 = _g3++;
							this.gamepadAxisCache[gamepad.index].push(0);
						}
					}
				}
			}
		} else {
			clay_Log.warning("Gamepads are not supported in this browser :(",{ fileName : "src/clay/web/WebRuntime.hx", lineNumber : 693, className : "clay.web.WebRuntime", methodName : "initGamepads"});
		}
	}
	,getGamepadList: function() {
		if($global.navigator.getGamepads != null) {
			return $global.navigator.getGamepads();
		}
		if($global.navigator.webkitGetGamepads != null) {
			return $global.navigator.webkitGetGamepads();
		}
		return null;
	}
	,initGamepadCacheIfNeeded: function(gamepad) {
		if(this.gamepadButtonCache[gamepad.index] == null) {
			this.gamepadButtonCache[gamepad.index] = [];
			var _g = 0;
			var _g1 = gamepad.buttons.length;
			while(_g < _g1) {
				var i = _g++;
				this.gamepadButtonCache[gamepad.index].push(0);
			}
			this.gamepadAxisCache[gamepad.index] = [];
			var _g = 0;
			var _g1 = gamepad.axes.length;
			while(_g < _g1) {
				var i = _g++;
				this.gamepadAxisCache[gamepad.index].push(0);
			}
		}
	}
	,deleteGamepadCache: function(gamepad) {
		this.gamepadButtonCache[gamepad.index] = null;
		this.gamepadAxisCache[gamepad.index] = null;
	}
	,pollGamepads: function() {
		var list = this.getGamepadList();
		if(list != null) {
			var len = list.length;
			var index = 0;
			while(index < len) {
				var gamepad = list[index];
				if(gamepad == null) {
					++index;
					continue;
				}
				if(this.gamepadButtonCache[gamepad.index] == null) {
					this.gamepadButtonCache[gamepad.index] = [];
					var _g = 0;
					var _g1 = gamepad.buttons.length;
					while(_g < _g1) {
						var i = _g++;
						this.gamepadButtonCache[gamepad.index].push(0);
					}
					this.gamepadAxisCache[gamepad.index] = [];
					var _g2 = 0;
					var _g3 = gamepad.axes.length;
					while(_g2 < _g3) {
						var i1 = _g2++;
						this.gamepadAxisCache[gamepad.index].push(0);
					}
				}
				var axisCache = this.gamepadAxisCache[gamepad.index];
				var _g4 = 0;
				var _g5 = gamepad.axes.length;
				while(_g4 < _g5) {
					var axisIndex = _g4++;
					var axis = gamepad.axes[axisIndex];
					if(axis != axisCache[axisIndex]) {
						axisCache[axisIndex] = axis;
						var _this = this.app.input;
						var gamepad1 = gamepad.index;
						var timestamp = window.performance.now() / 1000.0 - clay_web_WebRuntime.timestampStart;
						_this.app.events.gamepadAxis(gamepad1,axisIndex,axis,timestamp);
					}
				}
				var buttonCache = this.gamepadButtonCache[gamepad.index];
				var _g6 = 0;
				var _g7 = gamepad.buttons.length;
				while(_g6 < _g7) {
					var buttonIndex = _g6++;
					var button = gamepad.buttons[buttonIndex];
					if(button.value != buttonCache[buttonIndex]) {
						buttonCache[buttonIndex] = button.value;
						if(button.pressed) {
							var _this1 = this.app.input;
							var gamepad2 = gamepad.index;
							var value = button.value;
							var timestamp1 = window.performance.now() / 1000.0 - clay_web_WebRuntime.timestampStart;
							_this1.app.events.gamepadDown(gamepad2,buttonIndex,value,timestamp1);
						} else {
							var _this2 = this.app.input;
							var gamepad3 = gamepad.index;
							var value1 = button.value;
							var timestamp2 = window.performance.now() / 1000.0 - clay_web_WebRuntime.timestampStart;
							_this2.app.events.gamepadUp(gamepad3,buttonIndex,value1,timestamp2);
						}
					}
				}
				++index;
			}
		}
	}
	,windowDevicePixelRatio: function() {
		if(window.devicePixelRatio == null) {
			return 1.0;
		} else {
			return window.devicePixelRatio;
		}
	}
	,windowWidth: function() {
		return Math.round(this.windowW * this.windowDevicePixelRatio());
	}
	,windowHeight: function() {
		return Math.round(this.windowH * this.windowDevicePixelRatio());
	}
});
var clay_web__$WebRuntime_DOMKeys = function() { };
clay_web__$WebRuntime_DOMKeys.__name__ = true;
clay_web__$WebRuntime_DOMKeys.domKeyToKeyCode = function(keyCode) {
	switch(keyCode) {
	case 16:
		return 1073742049;
	case 17:
		return 1073742048;
	case 18:
		return 1073742050;
	case 20:
		return 1073741881;
	case 33:
		return 1073741899;
	case 34:
		return 1073741902;
	case 35:
		return 1073741901;
	case 36:
		return 1073741898;
	case 37:
		return 1073741904;
	case 38:
		return 1073741906;
	case 39:
		return 1073741903;
	case 40:
		return 1073741905;
	case 44:
		return 1073741894;
	case 45:
		return 1073741897;
	case 46:
		return 127;
	case 91:
		return 1073742051;
	case 93:
		return 1073742055;
	case 96:
		return 1073741922;
	case 97:
		return 1073741913;
	case 98:
		return 1073741914;
	case 99:
		return 1073741915;
	case 100:
		return 1073741916;
	case 101:
		return 1073741917;
	case 102:
		return 1073741918;
	case 103:
		return 1073741919;
	case 104:
		return 1073741920;
	case 105:
		return 1073741921;
	case 106:
		return 1073741909;
	case 107:
		return 1073741911;
	case 109:
		return 1073741910;
	case 110:
		return 1073742044;
	case 111:
		return 1073741908;
	case 112:
		return 1073741882;
	case 113:
		return 1073741883;
	case 114:
		return 1073741884;
	case 115:
		return 1073741885;
	case 116:
		return 1073741886;
	case 117:
		return 1073741887;
	case 118:
		return 1073741888;
	case 119:
		return 1073741889;
	case 120:
		return 1073741890;
	case 121:
		return 1073741891;
	case 122:
		return 1073741892;
	case 123:
		return 1073741893;
	case 124:
		return 1073741928;
	case 125:
		return 1073741929;
	case 126:
		return 1073741930;
	case 127:
		return 1073741931;
	case 128:
		return 1073741932;
	case 129:
		return 1073741933;
	case 130:
		return 1073741934;
	case 131:
		return 1073741935;
	case 132:
		return 1073741936;
	case 133:
		return 1073741937;
	case 134:
		return 1073741938;
	case 135:
		return 1073741939;
	case 144:
		return 1073741907;
	case 160:
		return 94;
	case 161:
		return 33;
	case 162:
		return 34;
	case 163:
		return 35;
	case 164:
		return 36;
	case 165:
		return 37;
	case 166:
		return 38;
	case 167:
		return 95;
	case 168:
		return 40;
	case 169:
		return 41;
	case 170:
		return 42;
	case 171:
		return 43;
	case 172:
		return 92;
	case 173:
		return 45;
	case 174:
		return 91;
	case 175:
		return 93;
	case 176:
		return 96;
	case 181:
		return 1073742086;
	case 182:
		return 1073741953;
	case 183:
		return 1073741952;
	case 188:
		return 44;
	case 190:
		return 46;
	case 191:
		return 47;
	case 192:
		return 96;
	case 219:
		return 91;
	case 220:
		return 92;
	case 221:
		return 93;
	case 222:
		return 39;
	case 224:
		return 1073742051;
	}
	return keyCode;
};
var haxe_Exception = function(message,previous,native) {
	Error.call(this,message);
	this.message = message;
	this.__previousException = previous;
	this.__nativeException = native != null ? native : this;
};
haxe_Exception.__name__ = true;
haxe_Exception.caught = function(value) {
	if(((value) instanceof haxe_Exception)) {
		return value;
	} else if(((value) instanceof Error)) {
		return new haxe_Exception(value.message,null,value);
	} else {
		return new haxe_ValueException(value,null,value);
	}
};
haxe_Exception.thrown = function(value) {
	if(((value) instanceof haxe_Exception)) {
		return value.get_native();
	} else if(((value) instanceof Error)) {
		return value;
	} else {
		var e = new haxe_ValueException(value);
		return e;
	}
};
haxe_Exception.__super__ = Error;
haxe_Exception.prototype = $extend(Error.prototype,{
	unwrap: function() {
		return this.__nativeException;
	}
	,get_native: function() {
		return this.__nativeException;
	}
});
var haxe_Log = function() { };
haxe_Log.__name__ = true;
haxe_Log.formatOutput = function(v,infos) {
	var str = Std.string(v);
	if(infos == null) {
		return str;
	}
	var pstr = infos.fileName + ":" + infos.lineNumber;
	if(infos.customParams != null) {
		var _g = 0;
		var _g1 = infos.customParams;
		while(_g < _g1.length) {
			var v = _g1[_g];
			++_g;
			str += ", " + Std.string(v);
		}
	}
	return pstr + ": " + str;
};
haxe_Log.trace = function(v,infos) {
	var str = haxe_Log.formatOutput(v,infos);
	if(typeof(console) != "undefined" && console.log != null) {
		console.log(str);
	}
};
var haxe_ValueException = function(value,previous,native) {
	haxe_Exception.call(this,String(value),previous,native);
	this.value = value;
};
haxe_ValueException.__name__ = true;
haxe_ValueException.__super__ = haxe_Exception;
haxe_ValueException.prototype = $extend(haxe_Exception.prototype,{
	unwrap: function() {
		return this.value;
	}
});
var haxe_ds_IntMap = function() {
	this.h = { };
};
haxe_ds_IntMap.__name__ = true;
var haxe_ds_StringMap = function() {
	this.h = Object.create(null);
};
haxe_ds_StringMap.__name__ = true;
var haxe_io_Bytes = function(data) {
	this.length = data.byteLength;
	this.b = new Uint8Array(data);
	this.b.bufferValue = data;
	data.hxBytes = this;
	data.bytes = this.b;
};
haxe_io_Bytes.__name__ = true;
var haxe_io_Path = function(path) {
	switch(path) {
	case ".":case "..":
		this.dir = path;
		this.file = "";
		return;
	}
	var c1 = path.lastIndexOf("/");
	var c2 = path.lastIndexOf("\\");
	if(c1 < c2) {
		this.dir = HxOverrides.substr(path,0,c2);
		path = HxOverrides.substr(path,c2 + 1,null);
		this.backslash = true;
	} else if(c2 < c1) {
		this.dir = HxOverrides.substr(path,0,c1);
		path = HxOverrides.substr(path,c1 + 1,null);
	} else {
		this.dir = null;
	}
	var cp = path.lastIndexOf(".");
	if(cp != -1) {
		this.ext = HxOverrides.substr(path,cp + 1,null);
		this.file = HxOverrides.substr(path,0,cp);
	} else {
		this.ext = null;
		this.file = path;
	}
};
haxe_io_Path.__name__ = true;
haxe_io_Path.extension = function(path) {
	var s = new haxe_io_Path(path);
	if(s.ext == null) {
		return "";
	}
	return s.ext;
};
var haxe_iterators_ArrayIterator = function(array) {
	this.current = 0;
	this.array = array;
};
haxe_iterators_ArrayIterator.__name__ = true;
haxe_iterators_ArrayIterator.prototype = {
	hasNext: function() {
		return this.current < this.array.length;
	}
	,next: function() {
		return this.array[this.current++];
	}
};
var js_Boot = function() { };
js_Boot.__name__ = true;
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(((o) instanceof Array)) {
			var str = "[";
			s += "\t";
			var _g = 0;
			var _g1 = o.length;
			while(_g < _g1) {
				var i = _g++;
				str += (i > 0 ? "," : "") + js_Boot.__string_rec(o[i],s);
			}
			str += "]";
			return str;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( _g ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var str = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		var k = null;
		for( k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str.length != 2) {
			str += ", \n";
		}
		str += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str += "\n" + s + "}";
		return str;
	case "string":
		return o;
	default:
		return String(o);
	}
};
var js_html__$CanvasElement_CanvasUtil = function() { };
js_html__$CanvasElement_CanvasUtil.__name__ = true;
js_html__$CanvasElement_CanvasUtil.getContextWebGL = function(canvas,attribs) {
	var name = "webgl";
	var ctx = canvas.getContext(name,attribs);
	if(ctx != null) {
		return ctx;
	}
	var name = "experimental-webgl";
	var ctx = canvas.getContext(name,attribs);
	if(ctx != null) {
		return ctx;
	}
	return null;
};
var sample_SampleVertexEvents = function() {
};
sample_SampleVertexEvents.__name__ = true;
sample_SampleVertexEvents.__super__ = clay_Events;
sample_SampleVertexEvents.prototype = $extend(clay_Events.prototype,{
	tick: function(delta) {
		sample_SampleVertex.draw();
	}
	,ready: function() {
		sample_SampleVertex.ready();
	}
});
var sample_SampleVertex = function() { };
sample_SampleVertex.__name__ = true;
sample_SampleVertex.main = function() {
	sample_SampleVertex.events = new sample_SampleVertexEvents();
	new clay_Clay(sample_SampleVertex.configure,sample_SampleVertex.events);
};
sample_SampleVertex.configure = function(config) {
	config.window.resizable = true;
	config.render.stencil = 2;
	config.render.depth = 16;
};
sample_SampleVertex.ready = function() {
	haxe_Log.trace("Create shader",{ fileName : "sample/src/sample/SampleVertex.hx", lineNumber : 86, className : "sample.SampleVertex", methodName : "ready"});
	sample_SampleVertex.shader = new clay_graphics_Shader();
	sample_SampleVertex.shader.vertSource = sample_SampleVertex.vertShaderData;
	sample_SampleVertex.shader.fragSource = sample_SampleVertex.fragShaderData;
	sample_SampleVertex.shader.attributes = ["vertexPosition","vertexColor"];
	sample_SampleVertex.shader.init();
	haxe_Log.trace("Did init shader",{ fileName : "sample/src/sample/SampleVertex.hx", lineNumber : 92, className : "sample.SampleVertex", methodName : "ready"});
	sample_SampleVertex.shader.activate();
};
sample_SampleVertex.draw = function() {
	haxe_Log.trace("screen width=" + clay_Clay.app.screenWidth + " height=" + clay_Clay.app.screenHeight + " density=" + clay_Clay.app.screenDensity,{ fileName : "sample/src/sample/SampleVertex.hx", lineNumber : 99, className : "sample.SampleVertex", methodName : "draw"});
	clay_opengl_GLGraphics.clear(0.25,0.25,0.25,1);
	clay_opengl_web_GL.gl.viewport(0,0,clay_Clay.app.screenWidth * clay_Clay.app.screenDensity | 0,clay_Clay.app.screenHeight * clay_Clay.app.screenDensity | 0);
	var vertices = new Float32Array([-0.8,-0.8,0.0,1.0,0.0,0.8,0.0,1.0,0.8,-0.8,0.0,1.0]);
	var colors = new Float32Array([1.0,0.0,0.0,1.0,0.0,1.0,0.0,1.0,0.0,0.0,1.0,1.0]);
	clay_opengl_web_GL.gl.enableVertexAttribArray(0);
	clay_opengl_web_GL.gl.enableVertexAttribArray(1);
	var verticesBuffer = clay_opengl_web_GL.gl.createBuffer();
	clay_opengl_web_GL.gl.bindBuffer(34962,verticesBuffer);
	clay_opengl_web_GL.gl.bufferData(34962,vertices,35040);
	clay_opengl_web_GL.gl.vertexAttribPointer(0,4,5126,false,0,0);
	var colorsBuffer = clay_opengl_web_GL.gl.createBuffer();
	clay_opengl_web_GL.gl.bindBuffer(34962,colorsBuffer);
	clay_opengl_web_GL.gl.bufferData(34962,colors,35040);
	clay_opengl_web_GL.gl.vertexAttribPointer(1,4,5126,false,0,0);
	clay_opengl_web_GL.gl.drawArrays(4,0,3);
	clay_opengl_web_GL.gl.deleteBuffer(verticesBuffer);
	clay_opengl_web_GL.gl.deleteBuffer(colorsBuffer);
	clay_opengl_web_GL.gl.disableVertexAttribArray(0);
	clay_opengl_web_GL.gl.disableVertexAttribArray(1);
	var error = clay_opengl_web_GL.gl.getError();
	if(error != 0) {
		throw haxe_Exception.thrown("Failed with GL error: " + error);
	}
};
var $_;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $global.$haxeUID++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = m.bind(o); o.hx__closures__[m.__id__] = f; } return f; }
$global.$haxeUID |= 0;
if(typeof(performance) != "undefined" ? typeof(performance.now) == "function" : false) {
	HxOverrides.now = performance.now.bind(performance);
}
if( String.fromCodePoint == null ) String.fromCodePoint = function(c) { return c < 0x10000 ? String.fromCharCode(c) : String.fromCharCode((c>>10)+0xD7C0)+String.fromCharCode((c&0x3FF)+0xDC00); }
String.__name__ = true;
Array.__name__ = true;
js_Boot.__toStr = ({ }).toString;
clay_ArrayPool.ALLOC_STEP = 10;
clay_ArrayPool.dynPool10 = new clay_ArrayPool(10);
clay_ArrayPool.dynPool100 = new clay_ArrayPool(100);
clay_ArrayPool.dynPool1000 = new clay_ArrayPool(1000);
clay_ArrayPool.dynPool10000 = new clay_ArrayPool(10000);
clay_ArrayPool.dynPool100000 = new clay_ArrayPool(100000);
clay_ArrayPool.didNotifyLargePool = false;
clay_Immediate.immediateCallbacks = [];
clay_Immediate.immediateCallbacksCapacity = 0;
clay_Immediate.immediateCallbacksLen = 0;
clay_KeyCode.UNKNOWN = 0;
clay_KeyCode.ENTER = 13;
clay_KeyCode.ESCAPE = 27;
clay_KeyCode.BACKSPACE = 8;
clay_KeyCode.TAB = 9;
clay_KeyCode.SPACE = 32;
clay_KeyCode.EXCLAIM = 33;
clay_KeyCode.QUOTEDBL = 34;
clay_KeyCode.HASH = 35;
clay_KeyCode.PERCENT = 37;
clay_KeyCode.DOLLAR = 36;
clay_KeyCode.AMPERSAND = 38;
clay_KeyCode.QUOTE = 39;
clay_KeyCode.LEFTPAREN = 40;
clay_KeyCode.RIGHTPAREN = 41;
clay_KeyCode.ASTERISK = 42;
clay_KeyCode.PLUS = 43;
clay_KeyCode.COMMA = 44;
clay_KeyCode.MINUS = 45;
clay_KeyCode.PERIOD = 46;
clay_KeyCode.SLASH = 47;
clay_KeyCode.KEY_0 = 48;
clay_KeyCode.KEY_1 = 49;
clay_KeyCode.KEY_2 = 50;
clay_KeyCode.KEY_3 = 51;
clay_KeyCode.KEY_4 = 52;
clay_KeyCode.KEY_5 = 53;
clay_KeyCode.KEY_6 = 54;
clay_KeyCode.KEY_7 = 55;
clay_KeyCode.KEY_8 = 56;
clay_KeyCode.KEY_9 = 57;
clay_KeyCode.COLON = 58;
clay_KeyCode.SEMICOLON = 59;
clay_KeyCode.LESS = 60;
clay_KeyCode.EQUALS = 61;
clay_KeyCode.GREATER = 62;
clay_KeyCode.QUESTION = 63;
clay_KeyCode.AT = 64;
clay_KeyCode.LEFTBRACKET = 91;
clay_KeyCode.BACKSLASH = 92;
clay_KeyCode.RIGHTBRACKET = 93;
clay_KeyCode.CARET = 94;
clay_KeyCode.UNDERSCORE = 95;
clay_KeyCode.BACKQUOTE = 96;
clay_KeyCode.KEY_A = 97;
clay_KeyCode.KEY_B = 98;
clay_KeyCode.KEY_C = 99;
clay_KeyCode.KEY_D = 100;
clay_KeyCode.KEY_E = 101;
clay_KeyCode.KEY_F = 102;
clay_KeyCode.KEY_G = 103;
clay_KeyCode.KEY_H = 104;
clay_KeyCode.KEY_I = 105;
clay_KeyCode.KEY_J = 106;
clay_KeyCode.KEY_K = 107;
clay_KeyCode.KEY_L = 108;
clay_KeyCode.KEY_M = 109;
clay_KeyCode.KEY_N = 110;
clay_KeyCode.KEY_O = 111;
clay_KeyCode.KEY_P = 112;
clay_KeyCode.KEY_Q = 113;
clay_KeyCode.KEY_R = 114;
clay_KeyCode.KEY_S = 115;
clay_KeyCode.KEY_T = 116;
clay_KeyCode.KEY_U = 117;
clay_KeyCode.KEY_V = 118;
clay_KeyCode.KEY_W = 119;
clay_KeyCode.KEY_X = 120;
clay_KeyCode.KEY_Y = 121;
clay_KeyCode.KEY_Z = 122;
clay_KeyCode.CAPSLOCK = 1073741881;
clay_KeyCode.F1 = 1073741882;
clay_KeyCode.F2 = 1073741883;
clay_KeyCode.F3 = 1073741884;
clay_KeyCode.F4 = 1073741885;
clay_KeyCode.F5 = 1073741886;
clay_KeyCode.F6 = 1073741887;
clay_KeyCode.F7 = 1073741888;
clay_KeyCode.F8 = 1073741889;
clay_KeyCode.F9 = 1073741890;
clay_KeyCode.F10 = 1073741891;
clay_KeyCode.F11 = 1073741892;
clay_KeyCode.F12 = 1073741893;
clay_KeyCode.PRINTSCREEN = 1073741894;
clay_KeyCode.SCROLLLOCK = 1073741895;
clay_KeyCode.PAUSE = 1073741896;
clay_KeyCode.INSERT = 1073741897;
clay_KeyCode.HOME = 1073741898;
clay_KeyCode.PAGEUP = 1073741899;
clay_KeyCode.DELETE = 127;
clay_KeyCode.END = 1073741901;
clay_KeyCode.PAGEDOWN = 1073741902;
clay_KeyCode.RIGHT = 1073741903;
clay_KeyCode.LEFT = 1073741904;
clay_KeyCode.DOWN = 1073741905;
clay_KeyCode.UP = 1073741906;
clay_KeyCode.NUMLOCKCLEAR = 1073741907;
clay_KeyCode.KP_DIVIDE = 1073741908;
clay_KeyCode.KP_MULTIPLY = 1073741909;
clay_KeyCode.KP_MINUS = 1073741910;
clay_KeyCode.KP_PLUS = 1073741911;
clay_KeyCode.KP_ENTER = 1073741912;
clay_KeyCode.KP_1 = 1073741913;
clay_KeyCode.KP_2 = 1073741914;
clay_KeyCode.KP_3 = 1073741915;
clay_KeyCode.KP_4 = 1073741916;
clay_KeyCode.KP_5 = 1073741917;
clay_KeyCode.KP_6 = 1073741918;
clay_KeyCode.KP_7 = 1073741919;
clay_KeyCode.KP_8 = 1073741920;
clay_KeyCode.KP_9 = 1073741921;
clay_KeyCode.KP_0 = 1073741922;
clay_KeyCode.KP_PERIOD = 1073741923;
clay_KeyCode.APPLICATION = 1073741925;
clay_KeyCode.POWER = 1073741926;
clay_KeyCode.KP_EQUALS = 1073741927;
clay_KeyCode.F13 = 1073741928;
clay_KeyCode.F14 = 1073741929;
clay_KeyCode.F15 = 1073741930;
clay_KeyCode.F16 = 1073741931;
clay_KeyCode.F17 = 1073741932;
clay_KeyCode.F18 = 1073741933;
clay_KeyCode.F19 = 1073741934;
clay_KeyCode.F20 = 1073741935;
clay_KeyCode.F21 = 1073741936;
clay_KeyCode.F22 = 1073741937;
clay_KeyCode.F23 = 1073741938;
clay_KeyCode.F24 = 1073741939;
clay_KeyCode.EXECUTE = 1073741940;
clay_KeyCode.HELP = 1073741941;
clay_KeyCode.MENU = 1073741942;
clay_KeyCode.SELECT = 1073741943;
clay_KeyCode.STOP = 1073741944;
clay_KeyCode.AGAIN = 1073741945;
clay_KeyCode.UNDO = 1073741946;
clay_KeyCode.CUT = 1073741947;
clay_KeyCode.COPY = 1073741948;
clay_KeyCode.PASTE = 1073741949;
clay_KeyCode.FIND = 1073741950;
clay_KeyCode.MUTE = 1073741951;
clay_KeyCode.VOLUMEUP = 1073741952;
clay_KeyCode.VOLUMEDOWN = 1073741953;
clay_KeyCode.KP_COMMA = 1073741957;
clay_KeyCode.KP_EQUALSAS400 = 1073741958;
clay_KeyCode.ALTERASE = 1073741977;
clay_KeyCode.SYSREQ = 1073741978;
clay_KeyCode.CANCEL = 1073741979;
clay_KeyCode.CLEAR = 1073741980;
clay_KeyCode.PRIOR = 1073741981;
clay_KeyCode.RETURN2 = 1073741982;
clay_KeyCode.SEPARATOR = 1073741983;
clay_KeyCode.OUT = 1073741984;
clay_KeyCode.OPER = 1073741985;
clay_KeyCode.CLEARAGAIN = 1073741986;
clay_KeyCode.CRSEL = 1073741987;
clay_KeyCode.EXSEL = 1073741988;
clay_KeyCode.KP_00 = 1073742000;
clay_KeyCode.KP_000 = 1073742001;
clay_KeyCode.THOUSANDSSEPARATOR = 1073742002;
clay_KeyCode.DECIMALSEPARATOR = 1073742003;
clay_KeyCode.CURRENCYUNIT = 1073742004;
clay_KeyCode.CURRENCYSUBUNIT = 1073742005;
clay_KeyCode.KP_LEFTPAREN = 1073742006;
clay_KeyCode.KP_RIGHTPAREN = 1073742007;
clay_KeyCode.KP_LEFTBRACE = 1073742008;
clay_KeyCode.KP_RIGHTBRACE = 1073742009;
clay_KeyCode.KP_TAB = 1073742010;
clay_KeyCode.KP_BACKSPACE = 1073742011;
clay_KeyCode.KP_A = 1073742012;
clay_KeyCode.KP_B = 1073742013;
clay_KeyCode.KP_C = 1073742014;
clay_KeyCode.KP_D = 1073742015;
clay_KeyCode.KP_E = 1073742016;
clay_KeyCode.KP_F = 1073742017;
clay_KeyCode.KP_XOR = 1073742018;
clay_KeyCode.KP_POWER = 1073742019;
clay_KeyCode.KP_PERCENT = 1073742020;
clay_KeyCode.KP_LESS = 1073742021;
clay_KeyCode.KP_GREATER = 1073742022;
clay_KeyCode.KP_AMPERSAND = 1073742023;
clay_KeyCode.KP_DBLAMPERSAND = 1073742024;
clay_KeyCode.KP_VERTICALBAR = 1073742025;
clay_KeyCode.KP_DBLVERTICALBAR = 1073742026;
clay_KeyCode.KP_COLON = 1073742027;
clay_KeyCode.KP_HASH = 1073742028;
clay_KeyCode.KP_SPACE = 1073742029;
clay_KeyCode.KP_AT = 1073742030;
clay_KeyCode.KP_EXCLAM = 1073742031;
clay_KeyCode.KP_MEMSTORE = 1073742032;
clay_KeyCode.KP_MEMRECALL = 1073742033;
clay_KeyCode.KP_MEMCLEAR = 1073742034;
clay_KeyCode.KP_MEMADD = 1073742035;
clay_KeyCode.KP_MEMSUBTRACT = 1073742036;
clay_KeyCode.KP_MEMMULTIPLY = 1073742037;
clay_KeyCode.KP_MEMDIVIDE = 1073742038;
clay_KeyCode.KP_PLUSMINUS = 1073742039;
clay_KeyCode.KP_CLEAR = 1073742040;
clay_KeyCode.KP_CLEARENTRY = 1073742041;
clay_KeyCode.KP_BINARY = 1073742042;
clay_KeyCode.KP_OCTAL = 1073742043;
clay_KeyCode.KP_DECIMAL = 1073742044;
clay_KeyCode.KP_HEXADECIMAL = 1073742045;
clay_KeyCode.LCTRL = 1073742048;
clay_KeyCode.LSHIFT = 1073742049;
clay_KeyCode.LALT = 1073742050;
clay_KeyCode.LMETA = 1073742051;
clay_KeyCode.RCTRL = 1073742052;
clay_KeyCode.RSHIFT = 1073742053;
clay_KeyCode.RALT = 1073742054;
clay_KeyCode.RMETA = 1073742055;
clay_KeyCode.MODE = 1073742081;
clay_KeyCode.AUDIONEXT = 1073742082;
clay_KeyCode.AUDIOPREV = 1073742083;
clay_KeyCode.AUDIOSTOP = 1073742084;
clay_KeyCode.AUDIOPLAY = 1073742085;
clay_KeyCode.AUDIOMUTE = 1073742086;
clay_KeyCode.MEDIASELECT = 1073742087;
clay_KeyCode.WWW = 1073742088;
clay_KeyCode.MAIL = 1073742089;
clay_KeyCode.CALCULATOR = 1073742090;
clay_KeyCode.COMPUTER = 1073742091;
clay_KeyCode.AC_SEARCH = 1073742092;
clay_KeyCode.AC_HOME = 1073742093;
clay_KeyCode.AC_BACK = 1073742094;
clay_KeyCode.AC_FORWARD = 1073742095;
clay_KeyCode.AC_STOP = 1073742096;
clay_KeyCode.AC_REFRESH = 1073742097;
clay_KeyCode.AC_BOOKMARKS = 1073742098;
clay_KeyCode.BRIGHTNESSDOWN = 1073742099;
clay_KeyCode.BRIGHTNESSUP = 1073742100;
clay_KeyCode.DISPLAYSWITCH = 1073742101;
clay_KeyCode.KBDILLUMTOGGLE = 1073742102;
clay_KeyCode.KBDILLUMDOWN = 1073742103;
clay_KeyCode.KBDILLUMUP = 1073742104;
clay_KeyCode.EJECT = 1073742105;
clay_KeyCode.SLEEP = 1073742106;
clay_ScanCode.MASK = 1073741824;
clay_ScanCode.UNKNOWN = 0;
clay_ScanCode.KEY_A = 4;
clay_ScanCode.KEY_B = 5;
clay_ScanCode.KEY_C = 6;
clay_ScanCode.KEY_D = 7;
clay_ScanCode.KEY_E = 8;
clay_ScanCode.KEY_F = 9;
clay_ScanCode.KEY_G = 10;
clay_ScanCode.KEY_H = 11;
clay_ScanCode.KEY_I = 12;
clay_ScanCode.KEY_J = 13;
clay_ScanCode.KEY_K = 14;
clay_ScanCode.KEY_L = 15;
clay_ScanCode.KEY_M = 16;
clay_ScanCode.KEY_N = 17;
clay_ScanCode.KEY_O = 18;
clay_ScanCode.KEY_P = 19;
clay_ScanCode.KEY_Q = 20;
clay_ScanCode.KEY_R = 21;
clay_ScanCode.KEY_S = 22;
clay_ScanCode.KEY_T = 23;
clay_ScanCode.KEY_U = 24;
clay_ScanCode.KEY_V = 25;
clay_ScanCode.KEY_W = 26;
clay_ScanCode.KEY_X = 27;
clay_ScanCode.KEY_Y = 28;
clay_ScanCode.KEY_Z = 29;
clay_ScanCode.KEY_1 = 30;
clay_ScanCode.KEY_2 = 31;
clay_ScanCode.KEY_3 = 32;
clay_ScanCode.KEY_4 = 33;
clay_ScanCode.KEY_5 = 34;
clay_ScanCode.KEY_6 = 35;
clay_ScanCode.KEY_7 = 36;
clay_ScanCode.KEY_8 = 37;
clay_ScanCode.KEY_9 = 38;
clay_ScanCode.KEY_0 = 39;
clay_ScanCode.ENTER = 40;
clay_ScanCode.ESCAPE = 41;
clay_ScanCode.BACKSPACE = 42;
clay_ScanCode.TAB = 43;
clay_ScanCode.SPACE = 44;
clay_ScanCode.MINUS = 45;
clay_ScanCode.EQUALS = 46;
clay_ScanCode.LEFTBRACKET = 47;
clay_ScanCode.RIGHTBRACKET = 48;
clay_ScanCode.BACKSLASH = 49;
clay_ScanCode.NONUSHASH = 50;
clay_ScanCode.SEMICOLON = 51;
clay_ScanCode.APOSTROPHE = 52;
clay_ScanCode.GRAVE = 53;
clay_ScanCode.COMMA = 54;
clay_ScanCode.PERIOD = 55;
clay_ScanCode.SLASH = 56;
clay_ScanCode.CAPSLOCK = 57;
clay_ScanCode.F1 = 58;
clay_ScanCode.F2 = 59;
clay_ScanCode.F3 = 60;
clay_ScanCode.F4 = 61;
clay_ScanCode.F5 = 62;
clay_ScanCode.F6 = 63;
clay_ScanCode.F7 = 64;
clay_ScanCode.F8 = 65;
clay_ScanCode.F9 = 66;
clay_ScanCode.F10 = 67;
clay_ScanCode.F11 = 68;
clay_ScanCode.F12 = 69;
clay_ScanCode.PRINTSCREEN = 70;
clay_ScanCode.SCROLLLOCK = 71;
clay_ScanCode.PAUSE = 72;
clay_ScanCode.INSERT = 73;
clay_ScanCode.HOME = 74;
clay_ScanCode.PAGEUP = 75;
clay_ScanCode.DELETE = 76;
clay_ScanCode.END = 77;
clay_ScanCode.PAGEDOWN = 78;
clay_ScanCode.RIGHT = 79;
clay_ScanCode.LEFT = 80;
clay_ScanCode.DOWN = 81;
clay_ScanCode.UP = 82;
clay_ScanCode.NUMLOCKCLEAR = 83;
clay_ScanCode.KP_DIVIDE = 84;
clay_ScanCode.KP_MULTIPLY = 85;
clay_ScanCode.KP_MINUS = 86;
clay_ScanCode.KP_PLUS = 87;
clay_ScanCode.KP_ENTER = 88;
clay_ScanCode.KP_1 = 89;
clay_ScanCode.KP_2 = 90;
clay_ScanCode.KP_3 = 91;
clay_ScanCode.KP_4 = 92;
clay_ScanCode.KP_5 = 93;
clay_ScanCode.KP_6 = 94;
clay_ScanCode.KP_7 = 95;
clay_ScanCode.KP_8 = 96;
clay_ScanCode.KP_9 = 97;
clay_ScanCode.KP_0 = 98;
clay_ScanCode.KP_PERIOD = 99;
clay_ScanCode.NONUSBACKSLASH = 100;
clay_ScanCode.APPLICATION = 101;
clay_ScanCode.POWER = 102;
clay_ScanCode.KP_EQUALS = 103;
clay_ScanCode.F13 = 104;
clay_ScanCode.F14 = 105;
clay_ScanCode.F15 = 106;
clay_ScanCode.F16 = 107;
clay_ScanCode.F17 = 108;
clay_ScanCode.F18 = 109;
clay_ScanCode.F19 = 110;
clay_ScanCode.F20 = 111;
clay_ScanCode.F21 = 112;
clay_ScanCode.F22 = 113;
clay_ScanCode.F23 = 114;
clay_ScanCode.F24 = 115;
clay_ScanCode.EXECUTE = 116;
clay_ScanCode.HELP = 117;
clay_ScanCode.MENU = 118;
clay_ScanCode.SELECT = 119;
clay_ScanCode.STOP = 120;
clay_ScanCode.AGAIN = 121;
clay_ScanCode.UNDO = 122;
clay_ScanCode.CUT = 123;
clay_ScanCode.COPY = 124;
clay_ScanCode.PASTE = 125;
clay_ScanCode.FIND = 126;
clay_ScanCode.MUTE = 127;
clay_ScanCode.VOLUMEUP = 128;
clay_ScanCode.VOLUMEDOWN = 129;
clay_ScanCode.KP_COMMA = 133;
clay_ScanCode.KP_EQUALSAS400 = 134;
clay_ScanCode.INTERNATIONAL1 = 135;
clay_ScanCode.INTERNATIONAL2 = 136;
clay_ScanCode.INTERNATIONAL3 = 137;
clay_ScanCode.INTERNATIONAL4 = 138;
clay_ScanCode.INTERNATIONAL5 = 139;
clay_ScanCode.INTERNATIONAL6 = 140;
clay_ScanCode.INTERNATIONAL7 = 141;
clay_ScanCode.INTERNATIONAL8 = 142;
clay_ScanCode.INTERNATIONAL9 = 143;
clay_ScanCode.LANG1 = 144;
clay_ScanCode.LANG2 = 145;
clay_ScanCode.LANG3 = 146;
clay_ScanCode.LANG4 = 147;
clay_ScanCode.LANG5 = 148;
clay_ScanCode.LANG6 = 149;
clay_ScanCode.LANG7 = 150;
clay_ScanCode.LANG8 = 151;
clay_ScanCode.LANG9 = 152;
clay_ScanCode.ALTERASE = 153;
clay_ScanCode.SYSREQ = 154;
clay_ScanCode.CANCEL = 155;
clay_ScanCode.CLEAR = 156;
clay_ScanCode.PRIOR = 157;
clay_ScanCode.RETURN2 = 158;
clay_ScanCode.SEPARATOR = 159;
clay_ScanCode.OUT = 160;
clay_ScanCode.OPER = 161;
clay_ScanCode.CLEARAGAIN = 162;
clay_ScanCode.CRSEL = 163;
clay_ScanCode.EXSEL = 164;
clay_ScanCode.KP_00 = 176;
clay_ScanCode.KP_000 = 177;
clay_ScanCode.THOUSANDSSEPARATOR = 178;
clay_ScanCode.DECIMALSEPARATOR = 179;
clay_ScanCode.CURRENCYUNIT = 180;
clay_ScanCode.CURRENCYSUBUNIT = 181;
clay_ScanCode.KP_LEFTPAREN = 182;
clay_ScanCode.KP_RIGHTPAREN = 183;
clay_ScanCode.KP_LEFTBRACE = 184;
clay_ScanCode.KP_RIGHTBRACE = 185;
clay_ScanCode.KP_TAB = 186;
clay_ScanCode.KP_BACKSPACE = 187;
clay_ScanCode.KP_A = 188;
clay_ScanCode.KP_B = 189;
clay_ScanCode.KP_C = 190;
clay_ScanCode.KP_D = 191;
clay_ScanCode.KP_E = 192;
clay_ScanCode.KP_F = 193;
clay_ScanCode.KP_XOR = 194;
clay_ScanCode.KP_POWER = 195;
clay_ScanCode.KP_PERCENT = 196;
clay_ScanCode.KP_LESS = 197;
clay_ScanCode.KP_GREATER = 198;
clay_ScanCode.KP_AMPERSAND = 199;
clay_ScanCode.KP_DBLAMPERSAND = 200;
clay_ScanCode.KP_VERTICALBAR = 201;
clay_ScanCode.KP_DBLVERTICALBAR = 202;
clay_ScanCode.KP_COLON = 203;
clay_ScanCode.KP_HASH = 204;
clay_ScanCode.KP_SPACE = 205;
clay_ScanCode.KP_AT = 206;
clay_ScanCode.KP_EXCLAM = 207;
clay_ScanCode.KP_MEMSTORE = 208;
clay_ScanCode.KP_MEMRECALL = 209;
clay_ScanCode.KP_MEMCLEAR = 210;
clay_ScanCode.KP_MEMADD = 211;
clay_ScanCode.KP_MEMSUBTRACT = 212;
clay_ScanCode.KP_MEMMULTIPLY = 213;
clay_ScanCode.KP_MEMDIVIDE = 214;
clay_ScanCode.KP_PLUSMINUS = 215;
clay_ScanCode.KP_CLEAR = 216;
clay_ScanCode.KP_CLEARENTRY = 217;
clay_ScanCode.KP_BINARY = 218;
clay_ScanCode.KP_OCTAL = 219;
clay_ScanCode.KP_DECIMAL = 220;
clay_ScanCode.KP_HEXADECIMAL = 221;
clay_ScanCode.LCTRL = 224;
clay_ScanCode.LSHIFT = 225;
clay_ScanCode.LALT = 226;
clay_ScanCode.LMETA = 227;
clay_ScanCode.RCTRL = 228;
clay_ScanCode.RSHIFT = 229;
clay_ScanCode.RALT = 230;
clay_ScanCode.RMETA = 231;
clay_ScanCode.MODE = 257;
clay_ScanCode.AUDIONEXT = 258;
clay_ScanCode.AUDIOPREV = 259;
clay_ScanCode.AUDIOSTOP = 260;
clay_ScanCode.AUDIOPLAY = 261;
clay_ScanCode.AUDIOMUTE = 262;
clay_ScanCode.MEDIASELECT = 263;
clay_ScanCode.WWW = 264;
clay_ScanCode.MAIL = 265;
clay_ScanCode.CALCULATOR = 266;
clay_ScanCode.COMPUTER = 267;
clay_ScanCode.AC_SEARCH = 268;
clay_ScanCode.AC_HOME = 269;
clay_ScanCode.AC_BACK = 270;
clay_ScanCode.AC_FORWARD = 271;
clay_ScanCode.AC_STOP = 272;
clay_ScanCode.AC_REFRESH = 273;
clay_ScanCode.AC_BOOKMARKS = 274;
clay_ScanCode.BRIGHTNESSDOWN = 275;
clay_ScanCode.BRIGHTNESSUP = 276;
clay_ScanCode.DISPLAYSWITCH = 277;
clay_ScanCode.KBDILLUMTOGGLE = 278;
clay_ScanCode.KBDILLUMDOWN = 279;
clay_ScanCode.KBDILLUMUP = 280;
clay_ScanCode.EJECT = 281;
clay_ScanCode.SLEEP = 282;
clay_ScanCode.APP1 = 283;
clay_ScanCode.APP2 = 284;
clay_ScanCode.scanCodeNames = [null,null,null,null,"A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z","1","2","3","4","5","6","7","8","9","0","Enter","Escape","Backspace","Tab","Space","-","=","[","]","\\","#",";","'","`",",",".","/","CapsLock","F1","F2","F3","F4","F5","F6","F7","F8","F9","F10","F11","F12","PrintScreen","ScrollLock","Pause","Insert","Home","PageUp","Delete","End","PageDown","Right","Left","Down","Up","Numlock","Keypad /","Keypad *","Keypad -","Keypad +","Keypad Enter","Keypad 1","Keypad 2","Keypad 3","Keypad 4","Keypad 5","Keypad 6","Keypad 7","Keypad 8","Keypad 9","Keypad 0","Keypad .",null,"Application","Power","Keypad =","F13","F14","F15","F16","F17","F18","F19","F20","F21","F22","F23","F24","Execute","Help","Menu","Select","Stop","Again","Undo","Cut","Copy","Paste","Find","Mute","VolumeUp","VolumeDown",null,null,null,"Keypad ,","Keypad = (AS400)",null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,"AltErase","SysReq","Cancel","Clear","Prior","Enter","Separator","Out","Oper","Clear / Again","CrSel","ExSel",null,null,null,null,null,null,null,null,null,null,null,"Keypad 00","Keypad 000","ThousandsSeparator","DecimalSeparator","CurrencyUnit","CurrencySubUnit","Keypad (","Keypad )","Keypad {","Keypad }","Keypad Tab","Keypad Backspace","Keypad A","Keypad B","Keypad C","Keypad D","Keypad E","Keypad F","Keypad XOR","Keypad ^","Keypad %","Keypad <","Keypad >","Keypad &","Keypad &&","Keypad |","Keypad ||","Keypad :","Keypad #","Keypad Space","Keypad @","Keypad !","Keypad MemStore","Keypad MemRecall","Keypad MemClear","Keypad MemAdd","Keypad MemSubtract","Keypad MemMultiply","Keypad MemDivide","Keypad +/-","Keypad Clear","Keypad ClearEntry","Keypad Binary","Keypad Octal","Keypad Decimal","Keypad Hexadecimal",null,null,"Left Ctrl","Left Shift","Left Alt","Left Meta","Right Ctrl","Right Shift","Right Alt","Right Meta",null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,"ModeSwitch","AudioNext","AudioPrev","AudioStop","AudioPlay","AudioMute","MediaSelect","WWW","Mail","Calculator","Computer","AC Search","AC Home","AC Back","AC Forward","AC Stop","AC Refresh","AC Bookmarks","BrightnessDown","BrightnessUp","DisplaySwitch","KBDIllumToggle","KBDIllumDown","KBDIllumUp","Eject","Sleep"];
clay_GamepadDeviceEventType.UNKNOWN = 0;
clay_GamepadDeviceEventType.DEVICE_ADDED = 1;
clay_GamepadDeviceEventType.DEVICE_REMOVED = 2;
clay_GamepadDeviceEventType.DEVICE_REMAPPED = 3;
clay_TextEventType.UNKNOWN = 0;
clay_TextEventType.EDIT = 1;
clay_TextEventType.INPUT = 2;
clay_WindowEventType.UNKNOWN = 0;
clay_WindowEventType.SHOWN = 1;
clay_WindowEventType.HIDDEN = 2;
clay_WindowEventType.EXPOSED = 3;
clay_WindowEventType.MOVED = 4;
clay_WindowEventType.RESIZED = 5;
clay_WindowEventType.SIZE_CHANGED = 6;
clay_WindowEventType.MINIMIZED = 7;
clay_WindowEventType.MAXIMIZED = 8;
clay_WindowEventType.RESTORED = 9;
clay_WindowEventType.ENTER = 10;
clay_WindowEventType.LEAVE = 11;
clay_WindowEventType.FOCUS_GAINED = 12;
clay_WindowEventType.FOCUS_LOST = 13;
clay_WindowEventType.CLOSE = 14;
clay_AppEventType.UNKNOWN = 0;
clay_AppEventType.TERMINATING = 11;
clay_AppEventType.LOW_MEMORY = 12;
clay_AppEventType.WILL_ENTER_BACKGROUND = 13;
clay_AppEventType.DID_ENTER_BACKGROUND = 14;
clay_AppEventType.WILL_ENTER_FOREGROUND = 15;
clay_AppEventType.DID_ENTER_FOREGROUND = 16;
clay_buffers_Float32Array.BYTES_PER_ELEMENT = 4;
clay_buffers_Int32Array.BYTES_PER_ELEMENT = 4;
clay_buffers_Uint8Array.BYTES_PER_ELEMENT = 1;
clay_graphics_Texture._nextIndex = 1;
clay_opengl_GLGraphics.DEPTH24_STENCIL8_OES = 35056;
clay_opengl_GLGraphics.TEXTURE_2D_MULTISAMPLE = 37120;
clay_opengl_GLGraphics._boundTexture2D = [];
clay_opengl_GLGraphics._activeTextureSlot = -1;
clay_opengl_GLGraphics._didFetchDefaultBuffers = false;
clay_opengl_web_GL.DEPTH_BUFFER_BIT = 256;
clay_opengl_web_GL.STENCIL_BUFFER_BIT = 1024;
clay_opengl_web_GL.COLOR_BUFFER_BIT = 16384;
clay_opengl_web_GL.POINTS = 0;
clay_opengl_web_GL.LINES = 1;
clay_opengl_web_GL.LINE_LOOP = 2;
clay_opengl_web_GL.LINE_STRIP = 3;
clay_opengl_web_GL.TRIANGLES = 4;
clay_opengl_web_GL.TRIANGLE_STRIP = 5;
clay_opengl_web_GL.TRIANGLE_FAN = 6;
clay_opengl_web_GL.ZERO = 0;
clay_opengl_web_GL.ONE = 1;
clay_opengl_web_GL.SRC_COLOR = 768;
clay_opengl_web_GL.ONE_MINUS_SRC_COLOR = 769;
clay_opengl_web_GL.SRC_ALPHA = 770;
clay_opengl_web_GL.ONE_MINUS_SRC_ALPHA = 771;
clay_opengl_web_GL.DST_ALPHA = 772;
clay_opengl_web_GL.ONE_MINUS_DST_ALPHA = 773;
clay_opengl_web_GL.DST_COLOR = 774;
clay_opengl_web_GL.ONE_MINUS_DST_COLOR = 775;
clay_opengl_web_GL.SRC_ALPHA_SATURATE = 776;
clay_opengl_web_GL.FUNC_ADD = 32774;
clay_opengl_web_GL.BLEND_EQUATION = 32777;
clay_opengl_web_GL.BLEND_EQUATION_RGB = 32777;
clay_opengl_web_GL.BLEND_EQUATION_ALPHA = 34877;
clay_opengl_web_GL.FUNC_SUBTRACT = 32778;
clay_opengl_web_GL.FUNC_REVERSE_SUBTRACT = 32779;
clay_opengl_web_GL.BLEND_DST_RGB = 32968;
clay_opengl_web_GL.BLEND_SRC_RGB = 32969;
clay_opengl_web_GL.BLEND_DST_ALPHA = 32970;
clay_opengl_web_GL.BLEND_SRC_ALPHA = 32971;
clay_opengl_web_GL.CONSTANT_COLOR = 32769;
clay_opengl_web_GL.ONE_MINUS_CONSTANT_COLOR = 32770;
clay_opengl_web_GL.CONSTANT_ALPHA = 32771;
clay_opengl_web_GL.ONE_MINUS_CONSTANT_ALPHA = 32772;
clay_opengl_web_GL.BLEND_COLOR = 32773;
clay_opengl_web_GL.ARRAY_BUFFER = 34962;
clay_opengl_web_GL.ELEMENT_ARRAY_BUFFER = 34963;
clay_opengl_web_GL.ARRAY_BUFFER_BINDING = 34964;
clay_opengl_web_GL.ELEMENT_ARRAY_BUFFER_BINDING = 34965;
clay_opengl_web_GL.STREAM_DRAW = 35040;
clay_opengl_web_GL.STATIC_DRAW = 35044;
clay_opengl_web_GL.DYNAMIC_DRAW = 35048;
clay_opengl_web_GL.BUFFER_SIZE = 34660;
clay_opengl_web_GL.BUFFER_USAGE = 34661;
clay_opengl_web_GL.CURRENT_VERTEX_ATTRIB = 34342;
clay_opengl_web_GL.FRONT = 1028;
clay_opengl_web_GL.BACK = 1029;
clay_opengl_web_GL.FRONT_AND_BACK = 1032;
clay_opengl_web_GL.CULL_FACE = 2884;
clay_opengl_web_GL.BLEND = 3042;
clay_opengl_web_GL.DITHER = 3024;
clay_opengl_web_GL.STENCIL_TEST = 2960;
clay_opengl_web_GL.DEPTH_TEST = 2929;
clay_opengl_web_GL.SCISSOR_TEST = 3089;
clay_opengl_web_GL.POLYGON_OFFSET_FILL = 32823;
clay_opengl_web_GL.SAMPLE_ALPHA_TO_COVERAGE = 32926;
clay_opengl_web_GL.SAMPLE_COVERAGE = 32928;
clay_opengl_web_GL.NO_ERROR = 0;
clay_opengl_web_GL.INVALID_ENUM = 1280;
clay_opengl_web_GL.INVALID_VALUE = 1281;
clay_opengl_web_GL.INVALID_OPERATION = 1282;
clay_opengl_web_GL.OUT_OF_MEMORY = 1285;
clay_opengl_web_GL.CW = 2304;
clay_opengl_web_GL.CCW = 2305;
clay_opengl_web_GL.LINE_WIDTH = 2849;
clay_opengl_web_GL.ALIASED_POINT_SIZE_RANGE = 33901;
clay_opengl_web_GL.ALIASED_LINE_WIDTH_RANGE = 33902;
clay_opengl_web_GL.CULL_FACE_MODE = 2885;
clay_opengl_web_GL.FRONT_FACE = 2886;
clay_opengl_web_GL.DEPTH_RANGE = 2928;
clay_opengl_web_GL.DEPTH_WRITEMASK = 2930;
clay_opengl_web_GL.DEPTH_CLEAR_VALUE = 2931;
clay_opengl_web_GL.DEPTH_FUNC = 2932;
clay_opengl_web_GL.STENCIL_CLEAR_VALUE = 2961;
clay_opengl_web_GL.STENCIL_FUNC = 2962;
clay_opengl_web_GL.STENCIL_FAIL = 2964;
clay_opengl_web_GL.STENCIL_PASS_DEPTH_FAIL = 2965;
clay_opengl_web_GL.STENCIL_PASS_DEPTH_PASS = 2966;
clay_opengl_web_GL.STENCIL_REF = 2967;
clay_opengl_web_GL.STENCIL_VALUE_MASK = 2963;
clay_opengl_web_GL.STENCIL_WRITEMASK = 2968;
clay_opengl_web_GL.STENCIL_BACK_FUNC = 34816;
clay_opengl_web_GL.STENCIL_BACK_FAIL = 34817;
clay_opengl_web_GL.STENCIL_BACK_PASS_DEPTH_FAIL = 34818;
clay_opengl_web_GL.STENCIL_BACK_PASS_DEPTH_PASS = 34819;
clay_opengl_web_GL.STENCIL_BACK_REF = 36003;
clay_opengl_web_GL.STENCIL_BACK_VALUE_MASK = 36004;
clay_opengl_web_GL.STENCIL_BACK_WRITEMASK = 36005;
clay_opengl_web_GL.VIEWPORT = 2978;
clay_opengl_web_GL.SCISSOR_BOX = 3088;
clay_opengl_web_GL.COLOR_CLEAR_VALUE = 3106;
clay_opengl_web_GL.COLOR_WRITEMASK = 3107;
clay_opengl_web_GL.UNPACK_ALIGNMENT = 3317;
clay_opengl_web_GL.PACK_ALIGNMENT = 3333;
clay_opengl_web_GL.MAX_TEXTURE_SIZE = 3379;
clay_opengl_web_GL.MAX_VIEWPORT_DIMS = 3386;
clay_opengl_web_GL.SUBPIXEL_BITS = 3408;
clay_opengl_web_GL.RED_BITS = 3410;
clay_opengl_web_GL.GREEN_BITS = 3411;
clay_opengl_web_GL.BLUE_BITS = 3412;
clay_opengl_web_GL.ALPHA_BITS = 3413;
clay_opengl_web_GL.DEPTH_BITS = 3414;
clay_opengl_web_GL.STENCIL_BITS = 3415;
clay_opengl_web_GL.POLYGON_OFFSET_UNITS = 10752;
clay_opengl_web_GL.POLYGON_OFFSET_FACTOR = 32824;
clay_opengl_web_GL.TEXTURE_BINDING_2D = 32873;
clay_opengl_web_GL.SAMPLE_BUFFERS = 32936;
clay_opengl_web_GL.SAMPLES = 32937;
clay_opengl_web_GL.SAMPLE_COVERAGE_VALUE = 32938;
clay_opengl_web_GL.SAMPLE_COVERAGE_INVERT = 32939;
clay_opengl_web_GL.COMPRESSED_TEXTURE_FORMATS = 34467;
clay_opengl_web_GL.DONT_CARE = 4352;
clay_opengl_web_GL.FASTEST = 4353;
clay_opengl_web_GL.NICEST = 4354;
clay_opengl_web_GL.GENERATE_MIPMAP_HINT = 33170;
clay_opengl_web_GL.BYTE = 5120;
clay_opengl_web_GL.UNSIGNED_BYTE = 5121;
clay_opengl_web_GL.SHORT = 5122;
clay_opengl_web_GL.UNSIGNED_SHORT = 5123;
clay_opengl_web_GL.INT = 5124;
clay_opengl_web_GL.UNSIGNED_INT = 5125;
clay_opengl_web_GL.FLOAT = 5126;
clay_opengl_web_GL.DEPTH_COMPONENT = 6402;
clay_opengl_web_GL.ALPHA = 6406;
clay_opengl_web_GL.RGB = 6407;
clay_opengl_web_GL.RGBA = 6408;
clay_opengl_web_GL.LUMINANCE = 6409;
clay_opengl_web_GL.LUMINANCE_ALPHA = 6410;
clay_opengl_web_GL.UNSIGNED_SHORT_4_4_4_4 = 32819;
clay_opengl_web_GL.UNSIGNED_SHORT_5_5_5_1 = 32820;
clay_opengl_web_GL.UNSIGNED_SHORT_5_6_5 = 33635;
clay_opengl_web_GL.FRAGMENT_SHADER = 35632;
clay_opengl_web_GL.VERTEX_SHADER = 35633;
clay_opengl_web_GL.MAX_VERTEX_ATTRIBS = 34921;
clay_opengl_web_GL.MAX_VERTEX_UNIFORM_VECTORS = 36347;
clay_opengl_web_GL.MAX_VARYING_VECTORS = 36348;
clay_opengl_web_GL.MAX_COMBINED_TEXTURE_IMAGE_UNITS = 35661;
clay_opengl_web_GL.MAX_VERTEX_TEXTURE_IMAGE_UNITS = 35660;
clay_opengl_web_GL.MAX_TEXTURE_IMAGE_UNITS = 34930;
clay_opengl_web_GL.MAX_FRAGMENT_UNIFORM_VECTORS = 36349;
clay_opengl_web_GL.SHADER_TYPE = 35663;
clay_opengl_web_GL.DELETE_STATUS = 35712;
clay_opengl_web_GL.LINK_STATUS = 35714;
clay_opengl_web_GL.VALIDATE_STATUS = 35715;
clay_opengl_web_GL.ATTACHED_SHADERS = 35717;
clay_opengl_web_GL.ACTIVE_UNIFORMS = 35718;
clay_opengl_web_GL.ACTIVE_ATTRIBUTES = 35721;
clay_opengl_web_GL.SHADING_LANGUAGE_VERSION = 35724;
clay_opengl_web_GL.CURRENT_PROGRAM = 35725;
clay_opengl_web_GL.NEVER = 512;
clay_opengl_web_GL.LESS = 513;
clay_opengl_web_GL.EQUAL = 514;
clay_opengl_web_GL.LEQUAL = 515;
clay_opengl_web_GL.GREATER = 516;
clay_opengl_web_GL.NOTEQUAL = 517;
clay_opengl_web_GL.GEQUAL = 518;
clay_opengl_web_GL.ALWAYS = 519;
clay_opengl_web_GL.KEEP = 7680;
clay_opengl_web_GL.REPLACE = 7681;
clay_opengl_web_GL.INCR = 7682;
clay_opengl_web_GL.DECR = 7683;
clay_opengl_web_GL.INVERT = 5386;
clay_opengl_web_GL.INCR_WRAP = 34055;
clay_opengl_web_GL.DECR_WRAP = 34056;
clay_opengl_web_GL.VENDOR = 7936;
clay_opengl_web_GL.RENDERER = 7937;
clay_opengl_web_GL.VERSION = 7938;
clay_opengl_web_GL.NEAREST = 9728;
clay_opengl_web_GL.LINEAR = 9729;
clay_opengl_web_GL.NEAREST_MIPMAP_NEAREST = 9984;
clay_opengl_web_GL.LINEAR_MIPMAP_NEAREST = 9985;
clay_opengl_web_GL.NEAREST_MIPMAP_LINEAR = 9986;
clay_opengl_web_GL.LINEAR_MIPMAP_LINEAR = 9987;
clay_opengl_web_GL.TEXTURE_MAG_FILTER = 10240;
clay_opengl_web_GL.TEXTURE_MIN_FILTER = 10241;
clay_opengl_web_GL.TEXTURE_WRAP_S = 10242;
clay_opengl_web_GL.TEXTURE_WRAP_T = 10243;
clay_opengl_web_GL.TEXTURE_2D = 3553;
clay_opengl_web_GL.TEXTURE = 5890;
clay_opengl_web_GL.TEXTURE_CUBE_MAP = 34067;
clay_opengl_web_GL.TEXTURE_BINDING_CUBE_MAP = 34068;
clay_opengl_web_GL.TEXTURE_CUBE_MAP_POSITIVE_X = 34069;
clay_opengl_web_GL.TEXTURE_CUBE_MAP_NEGATIVE_X = 34070;
clay_opengl_web_GL.TEXTURE_CUBE_MAP_POSITIVE_Y = 34071;
clay_opengl_web_GL.TEXTURE_CUBE_MAP_NEGATIVE_Y = 34072;
clay_opengl_web_GL.TEXTURE_CUBE_MAP_POSITIVE_Z = 34073;
clay_opengl_web_GL.TEXTURE_CUBE_MAP_NEGATIVE_Z = 34074;
clay_opengl_web_GL.MAX_CUBE_MAP_TEXTURE_SIZE = 34076;
clay_opengl_web_GL.TEXTURE0 = 33984;
clay_opengl_web_GL.TEXTURE1 = 33985;
clay_opengl_web_GL.TEXTURE2 = 33986;
clay_opengl_web_GL.TEXTURE3 = 33987;
clay_opengl_web_GL.TEXTURE4 = 33988;
clay_opengl_web_GL.TEXTURE5 = 33989;
clay_opengl_web_GL.TEXTURE6 = 33990;
clay_opengl_web_GL.TEXTURE7 = 33991;
clay_opengl_web_GL.TEXTURE8 = 33992;
clay_opengl_web_GL.TEXTURE9 = 33993;
clay_opengl_web_GL.TEXTURE10 = 33994;
clay_opengl_web_GL.TEXTURE11 = 33995;
clay_opengl_web_GL.TEXTURE12 = 33996;
clay_opengl_web_GL.TEXTURE13 = 33997;
clay_opengl_web_GL.TEXTURE14 = 33998;
clay_opengl_web_GL.TEXTURE15 = 33999;
clay_opengl_web_GL.TEXTURE16 = 34000;
clay_opengl_web_GL.TEXTURE17 = 34001;
clay_opengl_web_GL.TEXTURE18 = 34002;
clay_opengl_web_GL.TEXTURE19 = 34003;
clay_opengl_web_GL.TEXTURE20 = 34004;
clay_opengl_web_GL.TEXTURE21 = 34005;
clay_opengl_web_GL.TEXTURE22 = 34006;
clay_opengl_web_GL.TEXTURE23 = 34007;
clay_opengl_web_GL.TEXTURE24 = 34008;
clay_opengl_web_GL.TEXTURE25 = 34009;
clay_opengl_web_GL.TEXTURE26 = 34010;
clay_opengl_web_GL.TEXTURE27 = 34011;
clay_opengl_web_GL.TEXTURE28 = 34012;
clay_opengl_web_GL.TEXTURE29 = 34013;
clay_opengl_web_GL.TEXTURE30 = 34014;
clay_opengl_web_GL.TEXTURE31 = 34015;
clay_opengl_web_GL.ACTIVE_TEXTURE = 34016;
clay_opengl_web_GL.REPEAT = 10497;
clay_opengl_web_GL.CLAMP_TO_EDGE = 33071;
clay_opengl_web_GL.MIRRORED_REPEAT = 33648;
clay_opengl_web_GL.FLOAT_VEC2 = 35664;
clay_opengl_web_GL.FLOAT_VEC3 = 35665;
clay_opengl_web_GL.FLOAT_VEC4 = 35666;
clay_opengl_web_GL.INT_VEC2 = 35667;
clay_opengl_web_GL.INT_VEC3 = 35668;
clay_opengl_web_GL.INT_VEC4 = 35669;
clay_opengl_web_GL.BOOL = 35670;
clay_opengl_web_GL.BOOL_VEC2 = 35671;
clay_opengl_web_GL.BOOL_VEC3 = 35672;
clay_opengl_web_GL.BOOL_VEC4 = 35673;
clay_opengl_web_GL.FLOAT_MAT2 = 35674;
clay_opengl_web_GL.FLOAT_MAT3 = 35675;
clay_opengl_web_GL.FLOAT_MAT4 = 35676;
clay_opengl_web_GL.SAMPLER_2D = 35678;
clay_opengl_web_GL.SAMPLER_CUBE = 35680;
clay_opengl_web_GL.VERTEX_ATTRIB_ARRAY_ENABLED = 34338;
clay_opengl_web_GL.VERTEX_ATTRIB_ARRAY_SIZE = 34339;
clay_opengl_web_GL.VERTEX_ATTRIB_ARRAY_STRIDE = 34340;
clay_opengl_web_GL.VERTEX_ATTRIB_ARRAY_TYPE = 34341;
clay_opengl_web_GL.VERTEX_ATTRIB_ARRAY_NORMALIZED = 34922;
clay_opengl_web_GL.VERTEX_ATTRIB_ARRAY_POINTER = 34373;
clay_opengl_web_GL.VERTEX_ATTRIB_ARRAY_BUFFER_BINDING = 34975;
clay_opengl_web_GL.VERTEX_PROGRAM_POINT_SIZE = 34370;
clay_opengl_web_GL.POINT_SPRITE = 34913;
clay_opengl_web_GL.COMPILE_STATUS = 35713;
clay_opengl_web_GL.LOW_FLOAT = 36336;
clay_opengl_web_GL.MEDIUM_FLOAT = 36337;
clay_opengl_web_GL.HIGH_FLOAT = 36338;
clay_opengl_web_GL.LOW_INT = 36339;
clay_opengl_web_GL.MEDIUM_INT = 36340;
clay_opengl_web_GL.HIGH_INT = 36341;
clay_opengl_web_GL.FRAMEBUFFER = 36160;
clay_opengl_web_GL.RENDERBUFFER = 36161;
clay_opengl_web_GL.RGBA4 = 32854;
clay_opengl_web_GL.RGB5_A1 = 32855;
clay_opengl_web_GL.RGB565 = 36194;
clay_opengl_web_GL.DEPTH_COMPONENT16 = 33189;
clay_opengl_web_GL.STENCIL_INDEX = 6401;
clay_opengl_web_GL.STENCIL_INDEX8 = 36168;
clay_opengl_web_GL.DEPTH_STENCIL = 34041;
clay_opengl_web_GL.RENDERBUFFER_WIDTH = 36162;
clay_opengl_web_GL.RENDERBUFFER_HEIGHT = 36163;
clay_opengl_web_GL.RENDERBUFFER_INTERNAL_FORMAT = 36164;
clay_opengl_web_GL.RENDERBUFFER_RED_SIZE = 36176;
clay_opengl_web_GL.RENDERBUFFER_GREEN_SIZE = 36177;
clay_opengl_web_GL.RENDERBUFFER_BLUE_SIZE = 36178;
clay_opengl_web_GL.RENDERBUFFER_ALPHA_SIZE = 36179;
clay_opengl_web_GL.RENDERBUFFER_DEPTH_SIZE = 36180;
clay_opengl_web_GL.RENDERBUFFER_STENCIL_SIZE = 36181;
clay_opengl_web_GL.FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE = 36048;
clay_opengl_web_GL.FRAMEBUFFER_ATTACHMENT_OBJECT_NAME = 36049;
clay_opengl_web_GL.FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL = 36050;
clay_opengl_web_GL.FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE = 36051;
clay_opengl_web_GL.COLOR_ATTACHMENT0 = 36064;
clay_opengl_web_GL.DEPTH_ATTACHMENT = 36096;
clay_opengl_web_GL.STENCIL_ATTACHMENT = 36128;
clay_opengl_web_GL.DEPTH_STENCIL_ATTACHMENT = 33306;
clay_opengl_web_GL.NONE = 0;
clay_opengl_web_GL.FRAMEBUFFER_COMPLETE = 36053;
clay_opengl_web_GL.FRAMEBUFFER_INCOMPLETE_ATTACHMENT = 36054;
clay_opengl_web_GL.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT = 36055;
clay_opengl_web_GL.FRAMEBUFFER_INCOMPLETE_DIMENSIONS = 36057;
clay_opengl_web_GL.FRAMEBUFFER_UNSUPPORTED = 36061;
clay_opengl_web_GL.FRAMEBUFFER_BINDING = 36006;
clay_opengl_web_GL.RENDERBUFFER_BINDING = 36007;
clay_opengl_web_GL.MAX_RENDERBUFFER_SIZE = 34024;
clay_opengl_web_GL.INVALID_FRAMEBUFFER_OPERATION = 1286;
clay_opengl_web_GL.UNPACK_FLIP_Y_WEBGL = 37440;
clay_opengl_web_GL.UNPACK_PREMULTIPLY_ALPHA_WEBGL = 37441;
clay_opengl_web_GL.CONTEXT_LOST_WEBGL = 37442;
clay_opengl_web_GL.UNPACK_COLORSPACE_CONVERSION_WEBGL = 37443;
clay_opengl_web_GL.BROWSER_DEFAULT_WEBGL = 37444;
clay_web_WebAssets._binaryTrue = { binary : true};
clay_web_WebAssets.POT = true;
clay_web_WebRuntime.timestampStart = 0.0;
clay_web_WebRuntime.webWindowId = 1;
clay_web__$WebRuntime_DOMKeys.dom_shift = 16;
clay_web__$WebRuntime_DOMKeys.dom_ctrl = 17;
clay_web__$WebRuntime_DOMKeys.dom_alt = 18;
clay_web__$WebRuntime_DOMKeys.dom_capslock = 20;
clay_web__$WebRuntime_DOMKeys.dom_pageup = 33;
clay_web__$WebRuntime_DOMKeys.dom_pagedown = 34;
clay_web__$WebRuntime_DOMKeys.dom_end = 35;
clay_web__$WebRuntime_DOMKeys.dom_home = 36;
clay_web__$WebRuntime_DOMKeys.dom_left = 37;
clay_web__$WebRuntime_DOMKeys.dom_up = 38;
clay_web__$WebRuntime_DOMKeys.dom_right = 39;
clay_web__$WebRuntime_DOMKeys.dom_down = 40;
clay_web__$WebRuntime_DOMKeys.dom_printscr = 44;
clay_web__$WebRuntime_DOMKeys.dom_insert = 45;
clay_web__$WebRuntime_DOMKeys.dom_delete = 46;
clay_web__$WebRuntime_DOMKeys.dom_lmeta = 91;
clay_web__$WebRuntime_DOMKeys.dom_rmeta = 93;
clay_web__$WebRuntime_DOMKeys.dom_kp_0 = 96;
clay_web__$WebRuntime_DOMKeys.dom_kp_1 = 97;
clay_web__$WebRuntime_DOMKeys.dom_kp_2 = 98;
clay_web__$WebRuntime_DOMKeys.dom_kp_3 = 99;
clay_web__$WebRuntime_DOMKeys.dom_kp_4 = 100;
clay_web__$WebRuntime_DOMKeys.dom_kp_5 = 101;
clay_web__$WebRuntime_DOMKeys.dom_kp_6 = 102;
clay_web__$WebRuntime_DOMKeys.dom_kp_7 = 103;
clay_web__$WebRuntime_DOMKeys.dom_kp_8 = 104;
clay_web__$WebRuntime_DOMKeys.dom_kp_9 = 105;
clay_web__$WebRuntime_DOMKeys.dom_kp_multiply = 106;
clay_web__$WebRuntime_DOMKeys.dom_kp_plus = 107;
clay_web__$WebRuntime_DOMKeys.dom_kp_minus = 109;
clay_web__$WebRuntime_DOMKeys.dom_kp_decimal = 110;
clay_web__$WebRuntime_DOMKeys.dom_kp_divide = 111;
clay_web__$WebRuntime_DOMKeys.dom_kp_numlock = 144;
clay_web__$WebRuntime_DOMKeys.dom_f1 = 112;
clay_web__$WebRuntime_DOMKeys.dom_f2 = 113;
clay_web__$WebRuntime_DOMKeys.dom_f3 = 114;
clay_web__$WebRuntime_DOMKeys.dom_f4 = 115;
clay_web__$WebRuntime_DOMKeys.dom_f5 = 116;
clay_web__$WebRuntime_DOMKeys.dom_f6 = 117;
clay_web__$WebRuntime_DOMKeys.dom_f7 = 118;
clay_web__$WebRuntime_DOMKeys.dom_f8 = 119;
clay_web__$WebRuntime_DOMKeys.dom_f9 = 120;
clay_web__$WebRuntime_DOMKeys.dom_f10 = 121;
clay_web__$WebRuntime_DOMKeys.dom_f11 = 122;
clay_web__$WebRuntime_DOMKeys.dom_f12 = 123;
clay_web__$WebRuntime_DOMKeys.dom_f13 = 124;
clay_web__$WebRuntime_DOMKeys.dom_f14 = 125;
clay_web__$WebRuntime_DOMKeys.dom_f15 = 126;
clay_web__$WebRuntime_DOMKeys.dom_f16 = 127;
clay_web__$WebRuntime_DOMKeys.dom_f17 = 128;
clay_web__$WebRuntime_DOMKeys.dom_f18 = 129;
clay_web__$WebRuntime_DOMKeys.dom_f19 = 130;
clay_web__$WebRuntime_DOMKeys.dom_f20 = 131;
clay_web__$WebRuntime_DOMKeys.dom_f21 = 132;
clay_web__$WebRuntime_DOMKeys.dom_f22 = 133;
clay_web__$WebRuntime_DOMKeys.dom_f23 = 134;
clay_web__$WebRuntime_DOMKeys.dom_f24 = 135;
clay_web__$WebRuntime_DOMKeys.dom_caret = 160;
clay_web__$WebRuntime_DOMKeys.dom_exclaim = 161;
clay_web__$WebRuntime_DOMKeys.dom_quotedbl = 162;
clay_web__$WebRuntime_DOMKeys.dom_hash = 163;
clay_web__$WebRuntime_DOMKeys.dom_dollar = 164;
clay_web__$WebRuntime_DOMKeys.dom_percent = 165;
clay_web__$WebRuntime_DOMKeys.dom_ampersand = 166;
clay_web__$WebRuntime_DOMKeys.dom_underscore = 167;
clay_web__$WebRuntime_DOMKeys.dom_leftparen = 168;
clay_web__$WebRuntime_DOMKeys.dom_rightparen = 169;
clay_web__$WebRuntime_DOMKeys.dom_asterisk = 170;
clay_web__$WebRuntime_DOMKeys.dom_plus = 171;
clay_web__$WebRuntime_DOMKeys.dom_pipe = 172;
clay_web__$WebRuntime_DOMKeys.dom_minus = 173;
clay_web__$WebRuntime_DOMKeys.dom_leftbrace = 174;
clay_web__$WebRuntime_DOMKeys.dom_rightbrace = 175;
clay_web__$WebRuntime_DOMKeys.dom_tilde = 176;
clay_web__$WebRuntime_DOMKeys.dom_audiomute = 181;
clay_web__$WebRuntime_DOMKeys.dom_volumedown = 182;
clay_web__$WebRuntime_DOMKeys.dom_volumeup = 183;
clay_web__$WebRuntime_DOMKeys.dom_comma = 188;
clay_web__$WebRuntime_DOMKeys.dom_period = 190;
clay_web__$WebRuntime_DOMKeys.dom_slash = 191;
clay_web__$WebRuntime_DOMKeys.dom_backquote = 192;
clay_web__$WebRuntime_DOMKeys.dom_leftbracket = 219;
clay_web__$WebRuntime_DOMKeys.dom_rightbracket = 221;
clay_web__$WebRuntime_DOMKeys.dom_backslash = 220;
clay_web__$WebRuntime_DOMKeys.dom_quote = 222;
clay_web__$WebRuntime_DOMKeys.dom_meta = 224;
sample_SampleVertex.vertShaderData = StringTools.trim("\nattribute vec3 vertexPosition;\nattribute vec4 vertexColor;\n\nvarying vec4 color;\n\nuniform mat4 projectionMatrix;\nuniform mat4 modelViewMatrix;\n\nvoid main(void) {\n\n    gl_Position = vec4(vertexPosition, 1.0);\n    color = vertexColor;\n    gl_PointSize = 1.0;\n\n}\n");
sample_SampleVertex.fragShaderData = StringTools.trim("\n#ifdef GL_ES\nprecision mediump float;\n#else\n#define mediump\n#endif\n\nvarying vec4 color;\n\nvoid main() {\n    gl_FragColor = color;\n}\n");
sample_SampleVertex.main();
})(typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
